## Kaplan-Meier Curves

```{r}
plot(survfit(Surv(t, evt)~trt, ipd_data), conf.int = 0.95, col=c(2,4))
```

## Median Survival Time

```{r}
survfit(Surv(t, evt)~trt, ipd_data)
```

## Time Dependent Coefficients

Time dependent coefficients were estimated with piecewise constant coefficients and with splines. The breakpoint for the piecewise constant coefficients were chosen in regular 3 months intervals. The spline basis was chosen to have 4 knots spaced geometrically across the range of event times, similar to the example in the vignette "Using Time Dependent Covariates and Time Dependent
Coefficients in the Cox Model" to the survival package.

### piecewise constant

```{r}
mod_pw <- coxph(
  Surv(t, evt) ~ tt(trt),
  tt=function(x, t, ...){
    t_ <- cut(t, breaks = my_breaks)
    x*model.matrix(~t_-1)
  },
  data=ipd_data
  )

mod_pw
```

```{r}
x <- seq(0.1, my_max, by=0.1)
x_ <- cut(x, breaks = my_breaks)


hr <- exp(
  (model.matrix(~x_-1) %*% coefficients(mod_pw))
)

plot(x, hr, type="l", ylim=ylim)
abline(h=1)
```

### splines

```{r}
mod_spline <- coxph(
  Surv(t, evt) ~ tt(trt),
  tt=function(x, t, ...){
    x*nsk(t, knots=my_knots)
  },
  data=ipd_data
  )

mod_spline
```

```{r}
# x <- seq(0.1, my_max+my_interval, by=0.1)
# 
# hr <- exp(
#   (nsk(x, knots = my_knots) %*% coefficients(mod_spline)) +
#     coefficients(mod_spline)[1]
# )
# 
# plot(x, hr, type="l")
# abline(h=1)
```

## Long- and Short-time Survival

The Yang and Prentice long- and shortterm surival model was estimated using the `YPmodel` package, the estimated time dependendt hazard ratios and confidence intervals are shown.

```{r}
mod_yp <- ipd_data |> 
  setNames(c("V1", "V2", "V3")) |> 
  YPmodel()

plot.YPmodel.IntervalBands(mod_yp$IntervalBands)
abline(h=1)
```



## Aalen Additive Hazard Model

```{r}
mod_aareg <- aareg(Surv(t, evt) ~ trt, ipd_data)
mod_aareg
```

## All Methods Used in the Simulations

### Tests
```{r}
table_tests <- imap(my_tests, \(f,i){tibble(method=i, p=f(NA, ipd_data)$p)}) |> 
  list_rbind()

knitr::kable(table_tests)
```

### Estimators

```{r}
table_estimators <- map(names(my_estimators), \(i){
  result <- my_estimators[[i]](NA, ipd_data)
  data.frame(
    method = i,
    est = eval(extract_results[[i]][["est"]], envir = result),
    lower = eval(extract_results[[i]][["lower"]], envir = result),
    upper = eval(extract_results[[i]][["upper"]], envir = result)
  )
}) |>
  list_rbind()

row.names(table_estimators) <- NULL
knitr::kable(table_estimators)
```
