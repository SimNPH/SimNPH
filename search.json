[{"path":[]},{"path":"https://simnph.github.io/SimNPH/CONTRIBUTING.html","id":"reporting-issues","dir":"","previous_headings":"","what":"Reporting Issues","title":"Contributing to the SimNPH package","text":"Please report issues package, including documentation suggestions enhancements projects github issues.","code":""},{"path":"https://simnph.github.io/SimNPH/CONTRIBUTING.html","id":"extending-simnph","dir":"","previous_headings":"","what":"Extending SimNPH","title":"Contributing to the SimNPH package","text":"can extend functions package, either use contribute enhancements package. common ways extending package probably add data generating mechanisms additional analysis functions methods want evaluate. cases function skeletons good starting point.","code":""},{"path":"https://simnph.github.io/SimNPH/CONTRIBUTING.html","id":"data-generating-models","dir":"","previous_headings":"Extending SimNPH","what":"Data Generating Models","title":"Contributing to the SimNPH package","text":"Functions generate datasets named beginning generate_ descriptive name scenario simulate. order work SimDesign package, function take arguments condition fixed_objects. condition one row data.frame contains parameters scenario simulated. fixed_objects list variables, across secenarios passed. Generate functions come assumptions_... function outputs code generate default dataset parameters relevant data generation model, can used construct Design dataset. assumptions_... function also return dataset created printed code invisibly. Implement function R file generate_... function document documentation generate_... function using roxygen tag @describein. ’s boilerplate generate assumptions functions, can just copy fill code:","code":"#' Generate Dataset ... #' #' @param condition condition row of Design dataset #' @param fixed_objects fixed objects of Design dataset #' #' @details #' Condidtion has to contain the following columns: #' #'   * X ... #'   * Y ... #'   * ... #' #' @return #' For generate_x: A dataset with the columns t (time) and trt #' (1=treatment, 0=control), evt (event, currently TRUE for all observations) #' #' @export #' @describeIn generate_x simulates a dataset with ... #' #' @examples generate_x <- function(condition, fixed_objects=NULL){    data.frame(t=numeric(0), trt=integer(0), evt=logical(0)) }  #' Create an empty assumtions data.frame for generate_x_... #' #' @param print print code to generate parameter set? #' #' @return For assumptions_delayed_effect: a design tibble with default values invisibly #' #' @details assumptions_x_... generates a default design `data.frame` #'   for use with generate_x_.... If print is `TRUE` code to produce #'   the template is also printed for copying, pasting and editing by the user. #'   (This is the default when run in an interactive session.) #' #' @export #' @describeIn generate_x_... generate default design tibble #' #' @examples #' Design <- assumptions_x_...() #' Design assumptions_x_... <- function(print=interactive()){   skel <- \"expand.grid(   delay=m2d(seq(0, 10, by=2)), # delay of 0, 1, ..., 10 months   hazard_ctrl=m2r(24),         # median survival control of 24 months   hazard_trt=m2r(36),          # median survival treatment of 36 months   random_withdrawal=m2r(120)   # median time to random withdrawal 10 years ) \"    if(print){     cat(skel)   }    invisible(     skel |>       str2expression() |>       eval()   ) }  #' Calculate true summary statistics for scenarios with delayed treatment effect #' #' @param Design Design data.frame for x #' @param cutoff_stats Cutoff time for rmst and average hazard ratios #' @param fixed_objects fixed objects not used for now #' #' @return For true_summary_statistics_x: the design data.frame #'   passed as argument with the additional columns: #' * `rmst_trt` rmst in the treatment group #' * `median_surv_trt` median survival in the treatment group #' * `rmst_ctrl` rmst in the control group #' * `median_surv_ctrl` median survial in the control group #' * `gAHR` geometric average hazard ratio #' * `AHR` average hazard ratio #' #' @export #' #' @describeIn generate_x  calculate true summary statistics for ... #' #' @examples true_summary_statistics_x <- function(Design, cutoff_stats=10, fixed_objects=NULL){    true_summary_statistics_x_rowwise <- function(condition, cutoff_stats){     res <- data.frame(       rmst_trt = NA_real_,       medial_surv_trt = NA_real_,       rmst_ctrl = NA_real_,       median_surv_ctrl = NA_real_,       gAHR = NA_real_,       AHR = NA_real_     )          res   }    Design <- Design |>     split(1:nrow(Design)) |>     mapply(FUN=true_summary_statistics_x_rowwise, cutoff_stats = cutoff_stats, SIMPLIFY = FALSE)    Design <- do.call(rbind, Design)    Design }"},{"path":"https://simnph.github.io/SimNPH/CONTRIBUTING.html","id":"analysis-functions","dir":"","previous_headings":"Extending SimNPH","what":"Analysis Functions","title":"Contributing to the SimNPH package","text":"Analysis functions take parameters regarding analysis method (example weights weighted logrank test) return function can used SimDesigns runSimulation. use function analysis function runSimulation take arguments condition, dat, fixed_objects. Condition fixed_objects generate_... functions. dat Dataset generated generate_... function. dat contains least columns t, trt, evt time, treatment event. order work summarise functions package, analysis functions return list. (Unfortunately vectors data.frames concatenated SimDesign useful way, lists passed .) function requires summaries complex general functions estimators tests provide summarise function file analysis method.","code":"#' Create Analyse Functions for ... #' #' @param X #' #' @return an analyse function that can be used in runSimulation #' @export #' analyse_X <- function(X){   function(condition, dat, fixed_objects = NULL){     result_tmp <- list(       A = NA_real_,       N_pat=nrow(dat),       N_evt=sum(dat$evt)     )      result_tmp   } }   #' Summarise Output from Analyse Functions for ... #' #' @param X #' #' @describeIn analyse_X Summarise Output from Analyse X #' #' @return #' Returns a function with the arguments: #'  * condition #'  * results #'  * fixed objects #' #' that can be passed to create_summarise_function or to #' SimDesign::runSimulation and that returns a `data.frame` with the columns #'  * `Y` ... #'  * ... #' #' @export #' #' @examples summarise_x <- function(name=NULL){   res <- function(condition, results, fixed_objects=NULL){     data.frame(       \"Y\"=NA_real_     )   }    attr(res, \"name\") <- name    res }"},{"path":"https://simnph.github.io/SimNPH/CONTRIBUTING.html","id":"functions-for-censoring-and-experiment-designs","dir":"","previous_headings":"Extending SimNPH","what":"Functions for Censoring and Experiment Designs","title":"Contributing to the SimNPH package","text":"Different study setups also implemented via functions manipulate simulated dataset. example apply administrative censoring fixed followup time, first recruitment time sampled uniform distribution using function recruitment_uniform observations censored according survival time, recruitment time follwup time using function admin_censoring_time. can also combined random censoring fixed rate, … functions take simulated dataset first argument arguments later positions can used pipes.","code":"#' Modify a simulated dataset by ... #' #' @param dat a simulated dataset #' @param X ... #' @param ... #' #' @return #' Returns the dataset with ... #' @export #' #' @examples censoring_function_x <- function(dat, X){   dat$X <- X   dat }"},{"path":[]},{"path":"https://simnph.github.io/SimNPH/CONTRIBUTING.html","id":"project-structure","dir":"","previous_headings":"Contributing Changes to the Package","what":"Project Structure","title":"Contributing to the SimNPH package","text":"folder structure follows structure typical R package. Documentation NAMESPACE file generated roxygen, don’t edit files manually. Unit tests using testthat tests/testthat filenames corresponding filenames functions tested. package uses devtools, , testthat roxygen2 packages facilitate package development, packages conveniently integrated within rstudio.","code":""},{"path":"https://simnph.github.io/SimNPH/CONTRIBUTING.html","id":"coding-style","dir":"","previous_headings":"Contributing Changes to the Package","what":"Coding Style","title":"Contributing to the SimNPH package","text":"Please roughly keep tidyverse styleguide using functions packages (nph, cmprsk, …) refer namespace (example nph::rSurv_fun). DESCRIPTION file: don’t add package Depends, add package Suggests Imports.","code":""},{"path":"https://simnph.github.io/SimNPH/CONTRIBUTING.html","id":"documentation-and-tests","dir":"","previous_headings":"Contributing Changes to the Package","what":"Documentation and Tests","title":"Contributing to the SimNPH package","text":"adding functions provide documentation functions exported package namespace make sure devtools::document() runs without errors warnings. Please also add tests least test functions can called without error produce datasets right columns (name datatype). add tests file correct name correct place use usethis::use_test().","code":""},{"path":"https://simnph.github.io/SimNPH/articles/simple_example.html","id":"a-simple-scenario-with-fixed-followup","dir":"Articles","previous_headings":"","what":"A simple scenario with fixed followup","title":"Examples for the Usage of the SimNPH Package","text":"simple example run simulation analyses datasets delayed treatment effect using max-combo log-rank test. ","code":""},{"path":"https://simnph.github.io/SimNPH/articles/simple_example.html","id":"setting-up-the-scenarios","dir":"Articles","previous_headings":"A simple scenario with fixed followup","what":"Setting up the Scenarios","title":"Examples for the Usage of the SimNPH Package","text":"Setting simulations run. createDesign creates tibble every combination parameters. line corresponds one simulation run. function generate_delayed_effect needs columns: n_trt: number patients treatment arm, n_ctrl: number patients control arm, delay: delay onset treatment effect, hazard_ctrl: hazard control onset treatment effect, hazart_trt: hazard treatment, t_max: maximum time observation. example design tibble parameters filled can created desing_skeleton_delayed_effect. Use function output example function call can copy modify needed, assign result variable obtain design tibble default parameters. default create simulation design skeleton simulations 50 patients arm, constant hazard 0.2 control hazard 0.02 treatment effect onset varying 0 10.","code":"N_sim <- 100  Assumptions <- assumptions_delayed_effect() #> expand.grid( #>   delay=m2d(seq(0, 10, by=2)), # delay of 0, 1, ..., 10 months #>   hazard_ctrl=m2r(24),         # median survival control of 24 months #>   hazard_trt=m2r(36),          # median survival treatment of 36 months #>   random_withdrawal=m2r(120)   # median time to random withdrawal 10 years #> )  Options <- design_fixed_followup() #> expand.grid( #>   n_trt=150,         # 150 patients in the treatment arm #>   n_ctrl=150,        # 150 patients in the control arm #>   followup=m2d(24),  # followup 2 years #>   recruitment=m2d(6) # recruitment time 6 months #>  #> )  Design <- merge(Assumptions, Options, by=NULL)  knitr::kable(Design)"},{"path":"https://simnph.github.io/SimNPH/articles/simple_example.html","id":"defining-the-generate-funcion","dir":"Articles","previous_headings":"A simple scenario with fixed followup","what":"Defining the ‘Generate’ funcion","title":"Examples for the Usage of the SimNPH Package","text":"Define data generating ‘generate’ function, beside simulating time event also applies different censoring processes.","code":"my_generator <- function(condition, fixed_objects=NULL){   generate_delayed_effect(condition, fixed_objects) |>     recruitment_uniform(condition$recruitment) |>     random_censoring_exp(condition$random_withdrawal) |>     admin_censoring_time(condition$followup) }"},{"path":"https://simnph.github.io/SimNPH/articles/simple_example.html","id":"defining-the-summarise-function","dir":"Articles","previous_headings":"A simple scenario with fixed followup","what":"Defining the ‘Summarise’ function","title":"Examples for the Usage of the SimNPH Package","text":"Next, need specify summary function computes desired operating characteristics simulation scenario, analysis method. example , use summary function computes power (consider scenarios alternative example) log-rank test max-combo test across simulated scenarios. scenario function just averages number times computed p-value significance level obtain power. results object contains results replications corresponding method row Design object. example results$p contains N_sim p-values returned analyse_maxcombo analyse_logrank functions respectively. Summary contain columns rejection rate summary statistics methods.","code":"alpha <- 0.05  Summarise <- create_summarise_function(   maxcombo = summarise_test(alpha),   logrank  = summarise_test(alpha) )"},{"path":"https://simnph.github.io/SimNPH/articles/simple_example.html","id":"putting-it-all-together","dir":"Articles","previous_headings":"A simple scenario with fixed followup","what":"Putting it all together","title":"Examples for the Usage of the SimNPH Package","text":"Now put together: Design give scenarios defined . want run 100 replications scenario. want generate data using generate_delayed_effect function using parameters Design analyse replication scenario two functions analyse_logrank analyse_maxcombo. output summarised Summarise function defined simulations run parallel. Finally select interesting columns output. Since parameters scenario just select delay. interested rejection rate tests.","code":"res <- runSimulation(   Design,   replications = N_sim,   generate = my_generator,   analyse = list(     logrank  = analyse_logrank(),     maxcombo = analyse_maxcombo()   ),   summarise = Summarise,   cl = cl,   save=FALSE ) #>  #> Number of parallel clusters in use: 8 #>  #> Simulation complete. Total execution time: 14.28s res |>    subset(select=c(\"delay\", \"maxcombo.rejection_0.05\", \"logrank.rejection_0.05\")) |>   knitr::kable()"},{"path":"https://simnph.github.io/SimNPH/articles/simple_example.html","id":"a-scenario-with-an-interim-analysis","dir":"Articles","previous_headings":"","what":"A scenario with an interim analysis","title":"Examples for the Usage of the SimNPH Package","text":"scenario extend scenario include fixed followup well interim analysis fixed number events. define additional analyse functions. First extend Design include column number events interim analysis done.","code":"Options <- design_group_sequential() #> expand.grid( #>   n_trt=200,          # 200 patients in the treatment arm #>   n_ctrl=200,         # 200 patients in the control arm #>   followup=m2d(48),   # maximum followup time 4 years #>   recruitment=m2d(6), # recruitment time 6 months #>   interim_events=150, # interim analysis after 150 events #>   final_events=300    # final analysis after 300 events #> )  Design <- merge(Assumptions, Options, by=NULL)  knitr::kable(Design)"},{"path":"https://simnph.github.io/SimNPH/articles/simple_example.html","id":"analyse-functions-with-an-interim-analysis","dir":"Articles","previous_headings":"A scenario with an interim analysis","what":"‘Analyse’ functions with an interim analysis","title":"Examples for the Usage of the SimNPH Package","text":"analyse_group_sequential function allows combine two analyse functions create analysis function corresponding group sequential design. arguments times events analyses done, nominal alpha stage analyse functions used stage.","code":"## O'Brien-Fleming Bounds for GSD with interim analysis at information time 1/2 nominal_alpha <- ldbounds::ldBounds(c(0.5,1))$nom.alpha  clusterExport(cl, \"nominal_alpha\")  Analyse <-  list(   logrank_seq  = analyse_group_sequential(     followup = c(condition$interim_events, condition$final_events),     followup_type = c(\"event\", \"event\"),     alpha = nominal_alpha,     analyse_functions = analyse_logrank()   ),   maxcombo_seq = analyse_group_sequential(     followup = c(condition$interim_events, condition$final_events),     followup_type = c(\"event\", \"event\"),     alpha = nominal_alpha,     analyse_functions = analyse_maxcombo()   ) )"},{"path":"https://simnph.github.io/SimNPH/articles/simple_example.html","id":"a-summarise-function-for-the-more-complex-scenario","dir":"Articles","previous_headings":"A scenario with an interim analysis","what":"A ‘Summarise’ function for the more complex scenario","title":"Examples for the Usage of the SimNPH Package","text":"output function created analyse_group_sequential contains additional columns. rejected_at_stage includes stage null first rejected Inf null rejected, N_pat N_evt contain number patients recruited number events observed null rejected followup contains time study start last analysis done. results object also includes results returned stage results_stages, use overall test-decision.","code":"Summarise <- create_summarise_function(   maxcombo_seq = summarise_group_sequential(),   logrank_seq = summarise_group_sequential() )"},{"path":"https://simnph.github.io/SimNPH/articles/simple_example.html","id":"putting-it-all-together-1","dir":"Articles","previous_headings":"A scenario with an interim analysis","what":"Putting it all together","title":"Examples for the Usage of the SimNPH Package","text":"call runSimulation looks almost now additional columns defined Summarise functions included result. case group sequential design also interested average running time study terms patients recruited, number events running time study.","code":"res <- runSimulation(   Design,   replications = N_sim,   generate = my_generator,   analyse = Analyse,   summarise = Summarise,   cl = cl,   save=FALSE ) #>  #> Number of parallel clusters in use: 8 #>  #> Simulation complete. Total execution time: 30.07s res |>   subset(select=c(     \"delay\",      \"maxcombo_seq.rejection\", \"logrank_seq.rejection\",     \"maxcombo_seq.n_pat\", \"logrank_seq.n_pat\",     \"maxcombo_seq.n_evt\", \"logrank_seq.n_evt\",     \"maxcombo_seq.followup\", \"logrank_seq.followup\"     )) |>   knitr::kable()"},{"path":[]},{"path":"https://simnph.github.io/SimNPH/articles/simple_example.html","id":"calculating-the-true-values-of-the-summary-statistics","dir":"Articles","previous_headings":"Estimation","what":"Calculating the true values of the summary statistics","title":"Examples for the Usage of the SimNPH Package","text":"evaluate performance estimator, first compute values true summary statistics estimates compared. relevant true summary statistics can computed convenience function scenario. Just pipe Design data.frame function values statistics added columns.","code":"Options <- design_fixed_followup() #> expand.grid( #>   n_trt=150,         # 150 patients in the treatment arm #>   n_ctrl=150,        # 150 patients in the control arm #>   followup=m2d(24),  # followup 2 years #>   recruitment=m2d(6) # recruitment time 6 months #>  #> )  Design <- merge(Assumptions, Options, by=NULL)  Design <- Design |>    true_summary_statistics_delayed_effect(cutoff_stats = 20)  knitr::kable(Design)"},{"path":"https://simnph.github.io/SimNPH/articles/simple_example.html","id":"defining-the-summarise-function-1","dir":"Articles","previous_headings":"Estimation","what":"Defining the Summarise function","title":"Examples for the Usage of the SimNPH Package","text":"Summarise function true value estimator compared specified. coverage average width confidence intervals estimated, CI bounds also specified. arguments functions left un-evaluated later evaluated results condition datasets respectively. expressions using variables results can used estimated value CI bounds expressions using variables condition can used argument real value. case want compare hazard ratio estimated Cox model geometric average hazard ratio well hazard ratio onset treatment, calculated two respective columns Design data.frame. Note one name can used twice summarise output one analysis method two times, like case, comparing two different summary statistics.","code":"Summarise <- create_summarise_function(     coxph=summarise_estimator(hr, gAHR_20, hr_lower, hr_upper, name=\"gAHR\"),     coxph=summarise_estimator(hr, hazard_trt/hazard_ctrl, hr_lower, hr_upper, name=\"HR\")   )"},{"path":"https://simnph.github.io/SimNPH/articles/simple_example.html","id":"putting-it-all-together-2","dir":"Articles","previous_headings":"Estimation","what":"Putting it all together","title":"Examples for the Usage of the SimNPH Package","text":"","code":"Analyse <- list(   coxph = analyse_coxph() )  res <- runSimulation(   Design,   replications = N_sim,   generate = my_generator,   analyse = Analyse,   summarise = Summarise,   cl = cl,   save=FALSE ) #>  #> Number of parallel clusters in use: 8 #>  #> Simulation complete. Total execution time: 0.93s res |>   subset(select=c(     \"delay\", \"coxph.HR.bias\", \"coxph.gAHR.bias\", \"coxph.HR.mse\",      \"coxph.gAHR.mse\", \"coxph.HR.coverage\", \"coxph.gAHR.coverage\"   )) |>    knitr::kable()"},{"path":"https://simnph.github.io/SimNPH/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tobias Fellinger. Author, maintainer. Florian Klinglmueller. Author.","code":""},{"path":"https://simnph.github.io/SimNPH/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Klinglmüller F, Fellinger T, König F, Friede T, Hooker AC, Heinzl H, Mittlböck M, Brugger J, Bardo M, Huber C, Benda N, Posch M, Ristl R (2023). “neutral comparison statistical methods time--event analyses non-proportional hazards.” doi:10.48550/ARXIV.2310.05622.","code":"@Misc{,   title = {A neutral comparison of statistical methods for time-to-event analyses under non-proportional hazards},   author = {Florian Klinglmüller and Tobias Fellinger and Franz König and Tim Friede and Andrew C. Hooker and Harald Heinzl and Martina Mittlböck and Jonas Brugger and Maximilian Bardo and Cynthia Huber and Norbert Benda and Martin Posch and Robin Ristl},   year = {2023},   ulr = {https://arxiv.org/abs/2310.05622},   doi = {10.48550/ARXIV.2310.05622},   publisher = {arXiv}, }"},{"path":"https://simnph.github.io/SimNPH/index.html","id":"simnph","dir":"","previous_headings":"","what":"Simulate Non-Proportional Hazards","title":"Simulate Non-Proportional Hazards","text":"Simulate Non Proportional Hazards package provides several functions simulate survival data non proportional hazards using general purpose simulation package SimDesign. package follows structure SimDesing provides functions can readily used generate, analyse summarise arguments SimDesign’s runSimulation function.","code":""},{"path":[]},{"path":"https://simnph.github.io/SimNPH/index.html","id":"installation","dir":"","previous_headings":"Usage","what":"Installation","title":"Simulate Non-Proportional Hazards","text":"current development version can installed :","code":"remotes::install_git(\"https://github.com/SimNPH/SimNPH.git\")"},{"path":"https://simnph.github.io/SimNPH/index.html","id":"getting-started","dir":"","previous_headings":"Usage","what":"Getting Started","title":"Simulate Non-Proportional Hazards","text":"Documentation functions can found respective help topics package installation examples data generation, testing estimation can found vignette.","code":""},{"path":"https://simnph.github.io/SimNPH/index.html","id":"results-of-the-simulation-study","dir":"","previous_headings":"","what":"Results of the Simulation Study","title":"Simulate Non-Proportional Hazards","text":"results simulation study done CONFIRMS consortium course EMA tender published upcoming paper (preprint arXiv) presented shinylive App.","code":""},{"path":"https://simnph.github.io/SimNPH/index.html","id":"reproducing-the-results-of-the-simulation-study","dir":"","previous_headings":"","what":"Reproducing the Results of the Simulation study","title":"Simulate Non-Proportional Hazards","text":"parameters simulations set using following scripts: scripts/set_parameters_delayed_effect.R scripts/set_parameters_crossing_hazards.R scripts/set_parameters_subgroup.R scripts/set_parameters_progression.R simulations run using following scripts: scripts/run_simulations_delayed_effect.R scripts/run_simulations_crossing_hazards.R scripts/run_simulations_subgroup.R scripts/run_simulations_progression.R turn use scripts/run_simulations_common.R. scripts executed base directory repository working directory. Changes since conduct simulation study: version number SimNPH increased, reproduce simulation study, remove check run_simulations_... Simulation parameters results previously stored folder data. folder renamed data_sim_study data reserved use R packages. Change paths accordingly. run_simulations_... scripts use parameters specified data. want use parameter-values generated , update path accordingly.","code":""},{"path":"https://simnph.github.io/SimNPH/index.html","id":"re-using-the-scenarios","dir":"","previous_headings":"","what":"Re-Using the Scenarios","title":"Simulate Non-Proportional Hazards","text":"want re-use scenarios simulation study investigate additional methods, use scripts documentation provided SimTemplate github repository. Also refer documentation contributing. please cite simulation study, can get bibtex entry citation(package=\"SimNPH\").","code":""},{"path":"https://simnph.github.io/SimNPH/reference/SimNPH.html","id":null,"dir":"Reference","previous_headings":"","what":"SimNPH: Simulate Non Proportional Hazards — SimNPH","title":"SimNPH: Simulate Non Proportional Hazards — SimNPH","text":"package provides several functions simulate survival data non proportional hazards using general purpose simulation package SimDesign.","code":""},{"path":[]},{"path":"https://simnph.github.io/SimNPH/reference/SimNPH.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"SimNPH: Simulate Non Proportional Hazards — SimNPH","text":"Maintainer: Tobias Fellinger tobias.fellinger@ages.(ORCID) Authors: Florian Klinglmueller (ORCID)","code":""},{"path":"https://simnph.github.io/SimNPH/reference/admin_censoring_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Add recruitment time to Dataset — recruitment_uniform","title":"Add recruitment time to Dataset — recruitment_uniform","text":"Add recruitment time Dataset Apply Administrative Censoring Fixed Time Apply Administrative Censoring Fixed Number Events","code":""},{"path":"https://simnph.github.io/SimNPH/reference/admin_censoring_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add recruitment time to Dataset — recruitment_uniform","text":"","code":"recruitment_uniform(   dat,   recruitment_until,   recruitment_from = 0,   discrete = TRUE )  admin_censoring_time(dat, followup, keep_non_recruited = FALSE)  admin_censoring_events(   dat,   events,   keep_non_recruited = FALSE,   on_incomplete = \"ignore\" )"},{"path":"https://simnph.github.io/SimNPH/reference/admin_censoring_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add recruitment time to Dataset — recruitment_uniform","text":"dat simulated dataset recruitment_until time end recruitment recruitment_from time start recruitment (defaults 0) discrete recruitment time rounded full days? followup followup time keep_non_recruited patients recruited end study kept events number events dataset analyzed on_incomplete fewer events planned \"ignore\",\"warn\",\"stop\"","code":""},{"path":"https://simnph.github.io/SimNPH/reference/admin_censoring_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add recruitment time to Dataset — recruitment_uniform","text":"Returns dataset added recruitment times. Returns dataset administrative censoring follwup, adds attribute followup followup time dataset. Returns dataset administrative censoring events events, adds attribute followup followup time dataset.","code":""},{"path":"https://simnph.github.io/SimNPH/reference/admin_censoring_time.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add recruitment time to Dataset — recruitment_uniform","text":"Dataset hast include column rec_time containing recruitment time well columns event times t column event indicator evt. Times event indicaotrs patients recruited followup set NA. Dataset hast include column rec_time containing recruitment time well columns event times t column event indicator evt. Times event indicaotrs patients recruited followup set NA. less events planned study end on_incomplete defines done. \"ignore\" simply returns dataset maximum observed times followup. \"warn\" gives warning. \"stop\" stopps error.","code":""},{"path":"https://simnph.github.io/SimNPH/reference/admin_censoring_time.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Add recruitment time to Dataset — recruitment_uniform","text":"recruitment_uniform(): add recruitment time admin_censoring_time(): apply administrative censoring fixed time admin_censoring_events(): apply administrative censoring fixed number events","code":""},{"path":"https://simnph.github.io/SimNPH/reference/admin_censoring_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add recruitment time to Dataset — recruitment_uniform","text":"","code":"dat <- data.frame(t=c(0, 1, 2), trt=c(FALSE, FALSE, TRUE)) recruitment_uniform(dat, 7, 0) #>   t   trt rec_time #> 1 0 FALSE        1 #> 2 1 FALSE        6 #> 3 2  TRUE        5 dat <- data.frame(   t = 1:10,   rec_time = rep(1:5, each=2),   trt = rep(c(TRUE, FALSE), times=5),   evt = rep(TRUE, times=10) ) dat #>     t rec_time   trt  evt #> 1   1        1  TRUE TRUE #> 2   2        1 FALSE TRUE #> 3   3        2  TRUE TRUE #> 4   4        2 FALSE TRUE #> 5   5        3  TRUE TRUE #> 6   6        3 FALSE TRUE #> 7   7        4  TRUE TRUE #> 8   8        4 FALSE TRUE #> 9   9        5  TRUE TRUE #> 10 10        5 FALSE TRUE  admin_censoring_time(dat, 4) #>   t rec_time   trt   evt #> 1 1        1  TRUE  TRUE #> 2 2        1 FALSE  TRUE #> 3 2        2  TRUE FALSE #> 4 2        2 FALSE FALSE #> 5 1        3  TRUE FALSE #> 6 1        3 FALSE FALSE #> 7 0        4  TRUE FALSE #> 8 0        4 FALSE FALSE admin_censoring_time(dat, 4, keep_non_recruited = TRUE) #>     t rec_time   trt   evt #> 1   1        1  TRUE  TRUE #> 2   2        1 FALSE  TRUE #> 3   2        2  TRUE FALSE #> 4   2        2 FALSE FALSE #> 5   1        3  TRUE FALSE #> 6   1        3 FALSE FALSE #> 7   0        4  TRUE FALSE #> 8   0        4 FALSE FALSE #> 9  NA        5  TRUE    NA #> 10 NA        5 FALSE    NA  dat_censored <- admin_censoring_time(dat, 5) attr(dat_censored, \"followup\") #> [1] 5 dat <- data.frame(   t = 1:10,   rec_time = rep(2*(1:5), each=2),   trt = rep(c(TRUE, FALSE), times=5),   evt = rep(TRUE, times=10) ) dat #>     t rec_time   trt  evt #> 1   1        2  TRUE TRUE #> 2   2        2 FALSE TRUE #> 3   3        4  TRUE TRUE #> 4   4        4 FALSE TRUE #> 5   5        6  TRUE TRUE #> 6   6        6 FALSE TRUE #> 7   7        8  TRUE TRUE #> 8   8        8 FALSE TRUE #> 9   9       10  TRUE TRUE #> 10 10       10 FALSE TRUE  admin_censoring_events(dat, 4) #>   t rec_time   trt   evt #> 1 1        2  TRUE  TRUE #> 2 2        2 FALSE  TRUE #> 3 3        4  TRUE  TRUE #> 4 4        4 FALSE  TRUE #> 5 2        6  TRUE FALSE #> 6 2        6 FALSE FALSE #> 7 0        8  TRUE FALSE #> 8 0        8 FALSE FALSE admin_censoring_events(dat, 4, keep_non_recruited = TRUE) #>     t rec_time   trt   evt #> 1   1        2  TRUE  TRUE #> 2   2        2 FALSE  TRUE #> 3   3        4  TRUE  TRUE #> 4   4        4 FALSE  TRUE #> 5   2        6  TRUE FALSE #> 6   2        6 FALSE FALSE #> 7   0        8  TRUE FALSE #> 8   0        8 FALSE FALSE #> 9  NA       10  TRUE    NA #> 10 NA       10 FALSE    NA  dat_censored <- admin_censoring_events(dat, 4) attr(dat_censored, \"followup\") #> [1] 8"},{"path":"https://simnph.github.io/SimNPH/reference/analyse_aft.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyse Dataset with accelarated failure time models — analyse_aft","title":"Analyse Dataset with accelarated failure time models — analyse_aft","text":"Analyse Dataset accelarated failure time models","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_aft.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyse Dataset with accelarated failure time models — analyse_aft","text":"","code":"analyse_aft(level = 0.95, dist = \"weibull\", alternative = \"two.sided\")"},{"path":"https://simnph.github.io/SimNPH/reference/analyse_aft.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyse Dataset with accelarated failure time models — analyse_aft","text":"level confidence level CI computation dist passed survival::survreg alternative alternative hypothesis tests \"two.sided\" \"one.sieded\"","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_aft.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyse Dataset with accelarated failure time models — analyse_aft","text":"analyse function returns list elements p p value score test (two.sided) Wald test (one.sided) alternative alternative used coef coefficient trt lower lower 95% confidence intervall boundary coefficient upperlower 95% confidence intervall boundary coefficient CI_level CI level used N_pat number patients N_evt number events","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_aft.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyse Dataset with accelarated failure time models — analyse_aft","text":"alternative can \"two.sided\" two sided test equality summary statistic \"one.sided\" one sided test testing H0: treatment equal shorter survival control vs. H1 treatment longer survival control.","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_aft.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyse Dataset with accelarated failure time models — analyse_aft","text":"","code":"condition <- merge(   assumptions_delayed_effect(),   design_fixed_followup(),   by = NULL ) |>   head(1) dat <- generate_delayed_effect(condition) analyse_aft()(condition, dat) #> $p #> [1] 0.01392478 #>  #> $alternative #> [1] \"two.sided\" #>  #> $coef #>       trt  #> 0.2875961  #>  #> $lower #> [1] 0.05838397 #>  #> $upper #> [1] 0.5168082 #>  #> $CI_level #> [1] 0.95 #>  #> $N_pat #> [1] 300 #>  #> $N_evt #> [1] 300 #>  analyse_aft(dist=\"lognormal\")(condition, dat) #> $p #> [1] 0.03025141 #>  #> $alternative #> [1] \"two.sided\" #>  #> $coef #>       trt  #> 0.3155178  #>  #> $lower #> [1] 0.0301161 #>  #> $upper #> [1] 0.6009195 #>  #> $CI_level #> [1] 0.95 #>  #> $N_pat #> [1] 300 #>  #> $N_evt #> [1] 300 #>"},{"path":"https://simnph.github.io/SimNPH/reference/analyse_ahr.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyse the dataset using extimators for the the average hazard ratio — analyse_ahr","title":"Analyse the dataset using extimators for the the average hazard ratio — analyse_ahr","text":"Analyse dataset using extimators average hazard ratio","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_ahr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyse the dataset using extimators for the the average hazard ratio — analyse_ahr","text":"","code":"analyse_ahr(   max_time = NA,   type = \"AHR\",   level = 0.95,   alternative = \"two.sided\" )"},{"path":"https://simnph.github.io/SimNPH/reference/analyse_ahr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyse the dataset using extimators for the the average hazard ratio — analyse_ahr","text":"max_time time AHR calculated type \"AHR\" average hazard ratio \"gAHR\" geometric average hazard ratio level confidence level CI computation alternative alternative hypothesis tests \"two.sided\" \"one.sieded\"","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_ahr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyse the dataset using extimators for the the average hazard ratio — analyse_ahr","text":"Returns analysis function, can used runSimulations","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_ahr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyse the dataset using extimators for the the average hazard ratio — analyse_ahr","text":"implementation nph package used, see documentation details. alternative can \"two.sided\" two sided test equality summary statistic \"one.sided\" one sided test testing H0: treatment equal shorter survival control vs. H1 treatment longer survival control. data.frame returned created function includes follwing columns: p p value test, see Details alternative alternative used AHR/gAHR estimated (geometric) average hazard ratio AHR_lower/gAHR_lower unadjusted lower bound confidence interval (geometric) average hazard ratio AHR_upper/gAHR_upper unadjusted upper bound confidence interval (geometric) average hazard ratio CI_level CI level used N_pat number patients N_evt number events","code":""},{"path":[]},{"path":"https://simnph.github.io/SimNPH/reference/analyse_ahr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyse the dataset using extimators for the the average hazard ratio — analyse_ahr","text":"","code":"condition <- merge(   assumptions_delayed_effect(),   design_fixed_followup(),   by = NULL ) |>   head(1) dat <- generate_delayed_effect(condition) analyse_ahr()(condition, dat) #> $p #> [1] 0.0002724291 #>  #> $alternative #> [1] \"two.sided\" #>  #> $AHR #> [1] 0.6076783 #>  #> $AHR_lower #> [1] 0.4647279 #>  #> $AHR_upper #> [1] 0.7946001 #>  #> $CI_level #> [1] 0.95 #>  #> $N_pat #> [1] 300 #>  #> $N_evt #> [1] 300 #>  analyse_ahr(type = \"gAHR\")(condition, dat) #> $p #> [1] 1.171566e-05 #>  #> $alternative #> [1] \"two.sided\" #>  #> $gAHR #> [1] 0.5910285 #>  #> $gAHR_lower #> [1] 0.4671682 #>  #> $gAHR_upper #> [1] 0.7477279 #>  #> $CI_level #> [1] 0.95 #>  #> $N_pat #> [1] 300 #>  #> $N_evt #> [1] 300 #>  analyse_ahr(max_time = 50, type = \"AHR\")(condition, dat) #> $p #> [1] 0.8071216 #>  #> $alternative #> [1] \"two.sided\" #>  #> $AHR #> [1] 0.8881195 #>  #> $AHR_lower #> [1] 0.34261 #>  #> $AHR_upper #> [1] 2.302199 #>  #> $CI_level #> [1] 0.95 #>  #> $N_pat #> [1] 300 #>  #> $N_evt #> [1] 300 #>  analyse_ahr(max_time = 50, type = \"gAHR\")(condition, dat) #> $p #> [1] 0.8049128 #>  #> $alternative #> [1] \"two.sided\" #>  #> $gAHR #> [1] 0.8870164 #>  #> $gAHR_lower #> [1] 0.3425746 #>  #> $gAHR_upper #> [1] 2.29672 #>  #> $CI_level #> [1] 0.95 #>  #> $N_pat #> [1] 300 #>  #> $N_evt #> [1] 300 #>"},{"path":"https://simnph.github.io/SimNPH/reference/analyse_coxph.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyse Dataset with the Cox Protportional Hazards Model — analyse_coxph","title":"Analyse Dataset with the Cox Protportional Hazards Model — analyse_coxph","text":"Analyse Dataset Cox Protportional Hazards Model","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_coxph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyse Dataset with the Cox Protportional Hazards Model — analyse_coxph","text":"","code":"analyse_coxph(level = 0.95, alternative = \"two.sided\")"},{"path":"https://simnph.github.io/SimNPH/reference/analyse_coxph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyse Dataset with the Cox Protportional Hazards Model — analyse_coxph","text":"level confidence level CI computation alternative alternative hypothesis tests \"two.sided\" \"one.sieded\"","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_coxph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyse Dataset with the Cox Protportional Hazards Model — analyse_coxph","text":"analyse function returns list elements p p value score test (two.sided) Wald test (one.sided) alternative alternative used coef coefficient trt hr hazard ratio trt hr_lower lower 95% confidence intervall boundary hazard ratio trt hr_upperlower 95% confidence intervall boundary hazard ratio trt CI_level CI level used N_pat number patients N_evt number events","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_coxph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyse Dataset with the Cox Protportional Hazards Model — analyse_coxph","text":"alternative can \"two.sided\" two sided test equality summary statistic \"one.sided\" one sided test testing H0: treatment equal shorter survival control vs. H1 treatment longer survival control.","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_coxph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyse Dataset with the Cox Protportional Hazards Model — analyse_coxph","text":"","code":"condition <- merge(   assumptions_delayed_effect(),   design_fixed_followup(),   by = NULL ) |>   head(1) dat <- generate_delayed_effect(condition) analyse_coxph()(condition, dat) #> $p #> [1] 1.470751e-07 #>  #> $alternative #> [1] \"two.sided\" #>  #> $coef #>       trt  #> -0.627749  #>  #> $hr #>      trt  #> 0.533792  #>  #> $hr_lower #> [1] 0.4209495 #>  #> $hr_upper #> [1] 0.6768838 #>  #> $CI_level #> [1] 0.95 #>  #> $N_pat #> [1] 300 #>  #> $N_evt #> [1] 300 #>"},{"path":"https://simnph.github.io/SimNPH/reference/analyse_describe.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Function for Descriptive Statistics of a Dataset — analyse_describe","title":"Create a Function for Descriptive Statistics of a Dataset — analyse_describe","text":"Create Function Descriptive Statistics Dataset","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_describe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Function for Descriptive Statistics of a Dataset — analyse_describe","text":"","code":"analyse_describe()  summarise_describe(name = NULL)"},{"path":"https://simnph.github.io/SimNPH/reference/analyse_describe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Function for Descriptive Statistics of a Dataset — analyse_describe","text":"name name summarise function, appended name analysis method final results","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_describe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Function for Descriptive Statistics of a Dataset — analyse_describe","text":"analyse function returns list elements followup follow time events table events vs. treatment ice column ice present, table intercurrent events, events, treatment subgroup column subgroup present, table subgroup, events, treatment function can used Summarise returns data frame columns means standard deviations every variable description.","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_describe.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Create a Function for Descriptive Statistics of a Dataset — analyse_describe","text":"summarise_describe(): Summarise Descriptive Statistics","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_describe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Function for Descriptive Statistics of a Dataset — analyse_describe","text":"","code":"condition <- merge(     assumptions_delayed_effect(),     design_fixed_followup(),     by=NULL   ) |>   head(1) dat <- generate_delayed_effect(condition) analyse_describe()(condition, dat) #> $n_pat #> [1] 300 #>  #> $max_followup #> [1] 8901 #>  #> $evt #> [1] 300 #>  #> $evt_ctrl #> [1] 150 #>  #> $evt_trt #> [1] 150 #>  #> $study_time #> [1] NA #>  condition <- merge(   assumptions_delayed_effect(),   design_fixed_followup(),   by=NULL ) |>   tail(4) |>   head(1)  summarise_all <- create_summarise_function(   describe=summarise_describe() )  # runs simulations sim_results <- runSimulation(   design=condition,   replications=100,   generate=generate_delayed_effect,   analyse=list(     describe=analyse_describe()   ),   summarise = summarise_all ) #>  #>  Replications: 100;   RAM Used: 159.6 Mb;    #>  Conditions: delay=121., hzrd_c=0.0009, hzrd_t=0.0006, rndm_w=0.0001, n_trt=150, n_ctrl=150, follwp=730., rcrtmn=182. #>   # study time is missing, since there was no admin. censoring sim_results[, 9:16] #> # A tibble: 1 × 8 #>   describe.n_pat describe.max_followup describe.evt describe.evt_ctrl #>            <dbl>                 <dbl>        <dbl>             <dbl> #> 1            300                9020.8          300               150 #> # ℹ 4 more variables: describe.evt_trt <dbl>, describe.study_time <dbl>, #> #   describe.sd_n_pat <dbl>, describe.sd_max_followup <dbl>"},{"path":"https://simnph.github.io/SimNPH/reference/analyse_diff_median_survival.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyse the dataset using differnce in median survival — analyse_diff_median_survival","title":"Analyse the dataset using differnce in median survival — analyse_diff_median_survival","text":"Analyse dataset using differnce median survival","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_diff_median_survival.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyse the dataset using differnce in median survival — analyse_diff_median_survival","text":"","code":"analyse_diff_median_survival(   quant = 0.5,   level = 0.95,   alternative = \"two.sided\" )"},{"path":"https://simnph.github.io/SimNPH/reference/analyse_diff_median_survival.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyse the dataset using differnce in median survival — analyse_diff_median_survival","text":"quant quantile difference calculated, defaults median level confidence level CI computation alternative alternative hypothesis tests \"two.sided\" \"one.sieded\"","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_diff_median_survival.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyse the dataset using differnce in median survival — analyse_diff_median_survival","text":"Returns analysis function, can used runSimulations","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_diff_median_survival.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyse the dataset using differnce in median survival — analyse_diff_median_survival","text":"implementation nph package used, see documentation details. data.frame returned created function includes follwing columns: p p value test, see Details alternative alternative used diff_Q estimated differnce quantile suvivla functions diff_Q_lower unadjusted lower bound confidence interval differnce quantile suvivla functions diff_Q_upper unadjusted upper bound confidence interval differnce quantile suvivla functions CI_level CI level used quantile quantile used extimation N_pat number patients N_evt number events","code":""},{"path":[]},{"path":"https://simnph.github.io/SimNPH/reference/analyse_diff_median_survival.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyse the dataset using differnce in median survival — analyse_diff_median_survival","text":"","code":"condition <- merge(   assumptions_delayed_effect(),   design_fixed_followup(),   by = NULL ) |>   head(1) dat <- generate_delayed_effect(condition) analyse_diff_median_survival()(condition, dat) #> $p #> [1] 0.0005225646 #>  #> $alternative #> [1] \"two.sided\" #>  #> $diff_Q #> [1] 449 #>  #> $diff_Q_lower #> [1] 195.3115 #>  #> $diff_Q_upper #> [1] 702.6885 #>  #> $CI_level #> [1] 0.95 #>  #> $quantile #> [1] 0.5 #>  #> $N_pat #> [1] 300 #>  #> $N_evt #> [1] 300 #>"},{"path":"https://simnph.github.io/SimNPH/reference/analyse_gehan_wilcoxon.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Analyse function for Gehan Wilcoxon test — analyse_gehan_wilcoxon","title":"Create Analyse function for Gehan Wilcoxon test — analyse_gehan_wilcoxon","text":"Create Analyse function Gehan Wilcoxon test","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_gehan_wilcoxon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Analyse function for Gehan Wilcoxon test — analyse_gehan_wilcoxon","text":"","code":"analyse_gehan_wilcoxon(alternative = \"two.sided\")"},{"path":"https://simnph.github.io/SimNPH/reference/analyse_gehan_wilcoxon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Analyse function for Gehan Wilcoxon test — analyse_gehan_wilcoxon","text":"alternative alternative hypothesis tests \"two.sided\" \"one.sieded\"","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_gehan_wilcoxon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Analyse function for Gehan Wilcoxon test — analyse_gehan_wilcoxon","text":"analyse function can used runSimulation","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_gehan_wilcoxon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Analyse function for Gehan Wilcoxon test — analyse_gehan_wilcoxon","text":"alternative can \"two.sided\" two sided test equality summary statistic \"one.sided\" one sided test testing H0: treatment equal shorter survival control vs. H1 treatment longer survival control.","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_gehan_wilcoxon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Analyse function for Gehan Wilcoxon test — analyse_gehan_wilcoxon","text":"","code":"condition <- merge(   assumptions_delayed_effect(),   design_fixed_followup(),   by = NULL ) |>   head(1) dat <- generate_delayed_effect(condition) analyse_gehan_wilcoxon()(condition, dat) #> $p #> [1] 0.009155326 #>  #> $alternative #> [1] \"two.sided\" #>  #> $N_pat #> [1] 300 #>  #> $N_evt #> [1] 300 #>"},{"path":"https://simnph.github.io/SimNPH/reference/analyse_group_sequential.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Analyse Functions for Group Sequential Design — analyse_group_sequential","title":"Create Analyse Functions for Group Sequential Design — analyse_group_sequential","text":"Create Analyse Functions Group Sequential Design Summarise Output Analyse Functions Group Sequential Design","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_group_sequential.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Analyse Functions for Group Sequential Design — analyse_group_sequential","text":"","code":"analyse_group_sequential(followup, followup_type, alpha, analyse_functions)  summarise_group_sequential(name = NULL)"},{"path":"https://simnph.github.io/SimNPH/reference/analyse_group_sequential.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Analyse Functions for Group Sequential Design — analyse_group_sequential","text":"followup followup events time followup_type \"events\" \"time\" alpha nominal alpha stage analyse_functions analyse function list analyse functions name name attribute returned closure","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_group_sequential.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Analyse Functions for Group Sequential Design — analyse_group_sequential","text":"analyse function can used runSimulation Returns function arguments: condition results fixed objects can passed create_summarise_function SimDesign::runSimulation returns data.frame.","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_group_sequential.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Analyse Functions for Group Sequential Design — analyse_group_sequential","text":"followup, followup_type alpha evaluated every simulated dataset, .e. arguments Analyse function available, expressions like followup=c(condition$interim, condition$max_followup) valid arguments. analyse_functions take arguments condition, dataset fixed_objects return list conatining p-value, number patients number event columsn p, N_pat N_evt.","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_group_sequential.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Create Analyse Functions for Group Sequential Design — analyse_group_sequential","text":"summarise_group_sequential(): Summarise Output Analyse Functions Group Sequential Design","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_group_sequential.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Analyse Functions for Group Sequential Design — analyse_group_sequential","text":"","code":"# create a function to analyse after interim_events and maximum followup time # given in the condition row of the design data.frame with given # nominal alpha analyse_maxcombo_sequential <- analyse_group_sequential(   followup = c(condition$interim_events, condition$followup),   followup_type = c(\"event\", \"time\"),   alpha = c(0.025, 0.05),   analyse_functions = analyse_maxcombo() ) Summarise <- create_summarise_function(   maxcombo_seq = summarise_group_sequential(),   logrank_seq = summarise_group_sequential(name=\"logrank\") )"},{"path":"https://simnph.github.io/SimNPH/reference/analyse_logrank.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyse Dataset with the Logrank Test — analyse_logrank","title":"Analyse Dataset with the Logrank Test — analyse_logrank","text":"Analyse Dataset Logrank Test","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_logrank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyse Dataset with the Logrank Test — analyse_logrank","text":"","code":"analyse_logrank(alternative = \"two.sided\")"},{"path":"https://simnph.github.io/SimNPH/reference/analyse_logrank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyse Dataset with the Logrank Test — analyse_logrank","text":"alternative alternative hypothesis tests \"two.sided\" \"one.sieded\"","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_logrank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyse Dataset with the Logrank Test — analyse_logrank","text":"analysis function returns data.frame columns p p-value logrank test alternative alternative used N_pat number patients N_evt number events","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_logrank.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyse Dataset with the Logrank Test — analyse_logrank","text":"alternative can \"two.sided\" two sided test equality summary statistic \"one.sided\" one sided test testing H0: treatment equal shorter survival control vs. H1 treatment longer survival control.","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_logrank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyse Dataset with the Logrank Test — analyse_logrank","text":"","code":"condition <- merge(   assumptions_delayed_effect(),   design_fixed_followup(),   by = NULL ) |>   head(1) dat <- generate_delayed_effect(condition) analyse_logrank()(condition, dat) #> $p #> [1] 4.028494e-07 #>  #> $alternative #> [1] \"two.sided\" #>  #> $N_pat #> [1] 300 #>  #> $N_evt #> [1] 300 #>"},{"path":"https://simnph.github.io/SimNPH/reference/analyse_logrank_fh_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyse Dataset with the Fleming Harrington weighted Logrank Test — analyse_logrank_fh_weights","title":"Analyse Dataset with the Fleming Harrington weighted Logrank Test — analyse_logrank_fh_weights","text":"Analyse Dataset Fleming Harrington weighted Logrank Test","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_logrank_fh_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyse Dataset with the Fleming Harrington weighted Logrank Test — analyse_logrank_fh_weights","text":"","code":"analyse_logrank_fh_weights(rho, gamma, alternative = \"two.sided\")"},{"path":"https://simnph.github.io/SimNPH/reference/analyse_logrank_fh_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyse Dataset with the Fleming Harrington weighted Logrank Test — analyse_logrank_fh_weights","text":"rho rho rho-gamma family weights gamma gamma rho-gamma family weights alternative alternative hypothesis tests \"two.sided\" \"one.sieded\"","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_logrank_fh_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyse Dataset with the Fleming Harrington weighted Logrank Test — analyse_logrank_fh_weights","text":"function arguments condition, dat fixed_objects returns dataframe p-value weighted logrank test column p. See ?SimDesign::Analyse details arguments condition, dat, fixed_arguments.","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_logrank_fh_weights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyse Dataset with the Fleming Harrington weighted Logrank Test — analyse_logrank_fh_weights","text":"alternative can \"two.sided\" two sided test equality summary statistic \"one.sided\" one sided test testing H0: treatment equal shorter survival control vs. H1 treatment longer survival control.","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_logrank_fh_weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyse Dataset with the Fleming Harrington weighted Logrank Test — analyse_logrank_fh_weights","text":"","code":"condition <- merge(   assumptions_delayed_effect(),   design_fixed_followup(),   by = NULL ) |>   head(1) dat <- generate_delayed_effect(condition) # create two functions with different weights analyse_01 <- analyse_logrank_fh_weights(rho = 0, gamma = 1) analyse_10 <- analyse_logrank_fh_weights(rho = 1, gamma = 0) # run the tests created before analyse_01(condition, dat) #> $p #> [1] 5.437706e-06 #>  #> $alternative #> [1] \"two.sided\" #>  #> $N_pat #> [1] 300 #>  #> $N_evt #> [1] 300 #>  analyse_10(condition, dat) #> $p #> [1] 5.61106e-05 #>  #> $alternative #> [1] \"two.sided\" #>  #> $N_pat #> [1] 300 #>  #> $N_evt #> [1] 300 #>"},{"path":"https://simnph.github.io/SimNPH/reference/analyse_maxcombo.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyse Dataset with the Maxcombo Test — analyse_maxcombo","title":"Analyse Dataset with the Maxcombo Test — analyse_maxcombo","text":"Analyse Dataset Maxcombo Test","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_maxcombo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyse Dataset with the Maxcombo Test — analyse_maxcombo","text":"","code":"analyse_maxcombo(alternative = \"two.sided\")"},{"path":"https://simnph.github.io/SimNPH/reference/analyse_maxcombo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyse Dataset with the Maxcombo Test — analyse_maxcombo","text":"alternative alternative hypothesis tests \"two.sided\" \"one.sieded\"","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_maxcombo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyse Dataset with the Maxcombo Test — analyse_maxcombo","text":"analyse function returns data.frame combined p-value max combo test column p","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_maxcombo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyse Dataset with the Maxcombo Test — analyse_maxcombo","text":"alternative can \"two.sided\" two sided test equality summary statistic \"one.sided\" one sided test testing H0: treatment equal shorter survival control vs. H1 treatment longer survival control.","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_maxcombo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyse Dataset with the Maxcombo Test — analyse_maxcombo","text":"","code":"condition <- merge(   assumptions_delayed_effect(),   design_fixed_followup(),   by = NULL ) |>   head(1) dat <- generate_delayed_effect(condition) analyse_maxcombo()(condition, dat) #> $p #> [1] 9.762037e-06 #>  #> $N_pat #> [1] 300 #>  #> $N_evt #> [1] 300 #>"},{"path":"https://simnph.github.io/SimNPH/reference/analyse_milestone_survival.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyse the Dataset using difference or quotient of milestone survival — analyse_milestone_survival","title":"Analyse the Dataset using difference or quotient of milestone survival — analyse_milestone_survival","text":"Analyse Dataset using difference quotient milestone survival","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_milestone_survival.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyse the Dataset using difference or quotient of milestone survival — analyse_milestone_survival","text":"","code":"analyse_milestone_survival(   times,   what = \"quot\",   level = 0.95,   alternative = \"two.sided\" )"},{"path":"https://simnph.github.io/SimNPH/reference/analyse_milestone_survival.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyse the Dataset using difference or quotient of milestone survival — analyse_milestone_survival","text":"times followup times survival compared \"quot\" quotient \"diff\" differnce surival probabilities level confidence level CI computation alternative alternative hypothesis tests \"two.sided\" \"one.sieded\"","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_milestone_survival.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyse the Dataset using difference or quotient of milestone survival — analyse_milestone_survival","text":"Returns analysis function, can used runSimulations","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_milestone_survival.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyse the Dataset using difference or quotient of milestone survival — analyse_milestone_survival","text":"implementation nph package used, see documentation details. alternative can \"two.sided\" two sided test equality summary statistic \"one.sided\" one sided test testing H0: treatment equal shorter survival control vs. H1 treatment longer survival control. data.frame returned created function includes follwing columns: milestone_surv_ratio / milestone_surv_diff ratio differnce survival probabilities times followup times survival compared N_pat number patients N_evt number events p p value H0 ratios 1 differnce 0 respectively alternative alternative used milestone_surv_ratio_lower / milestone_surv_diff_lower upper/lower CI estimate milestone_surv_ratio_upper / milestone_surv_diff_upper upper/lower CI estimate CI_level CI level used","code":""},{"path":[]},{"path":"https://simnph.github.io/SimNPH/reference/analyse_milestone_survival.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyse the Dataset using difference or quotient of milestone survival — analyse_milestone_survival","text":"","code":"condition <- merge(     assumptions_delayed_effect(),     design_fixed_followup(),     by=NULL   ) |>   head(1) dat <- generate_delayed_effect(condition) analyse_milestone_survival(3:5)(condition, dat) #> Warning: replacement has length zero #> $p #> [1] NA #>  #> $alternative #> [1] \"two.sided\" #>  #> $milestone_surv_ratio #> [1] NA #>  #> $milestone_surv_ratio_lower #> [1] NA #>  #> $milestone_surv_ratio_upper #> [1] NA #>  #> $CI_level #> [1] 0.95 #>  #> $times #> [1] 3 4 5 #>  #> $N_pat #> [1] 300 #>  #> $N_evt #> [1] 300 #>  analyse_milestone_survival(3:5, what=\"diff\")(condition, dat) #> Warning: replacement has length zero #> $p #> [1] NA #>  #> $alternative #> [1] \"two.sided\" #>  #> $milestone_surv_diff #> [1] NA #>  #> $milestone_surv_diff_lower #> [1] NA #>  #> $milestone_surv_diff_upper #> [1] NA #>  #> $CI_level #> [1] 0.95 #>  #> $times #> [1] 3 4 5 #>  #> $N_pat #> [1] 300 #>  #> $N_evt #> [1] 300 #>"},{"path":"https://simnph.github.io/SimNPH/reference/analyse_modelstly_weighted.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Analyse function for the modestly weighted logrank test — analyse_modelstly_weighted","title":"Create Analyse function for the modestly weighted logrank test — analyse_modelstly_weighted","text":"Create Analyse function modestly weighted logrank test","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_modelstly_weighted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Analyse function for the modestly weighted logrank test — analyse_modelstly_weighted","text":"","code":"analyse_modelstly_weighted(t_star)"},{"path":"https://simnph.github.io/SimNPH/reference/analyse_modelstly_weighted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Analyse function for the modestly weighted logrank test — analyse_modelstly_weighted","text":"t_star parameter t* modestly weighted logrank test","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_modelstly_weighted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Analyse function for the modestly weighted logrank test — analyse_modelstly_weighted","text":"analyse function can used runSimulation","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_modelstly_weighted.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Analyse function for the modestly weighted logrank test — analyse_modelstly_weighted","text":"","code":"condition <- merge(    assumptions_delayed_effect(),    design_fixed_followup(),    by=NULL  ) |>  head(1) dat <- generate_delayed_effect(condition) analyse_modelstly_weighted(20)(condition, dat) #> $p #> [1] 1.205258e-05 #>  #> $N_pat #> [1] 300 #>  #> $N_evt #> [1] 300 #>"},{"path":"https://simnph.github.io/SimNPH/reference/analyse_piecewise_exponential.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Analyse function for piecewise exponential model — analyse_piecewise_exponential","title":"Create Analyse function for piecewise exponential model — analyse_piecewise_exponential","text":"Create Analyse function piecewise exponential model","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_piecewise_exponential.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Analyse function for piecewise exponential model — analyse_piecewise_exponential","text":"","code":"analyse_piecewise_exponential(cuts, testing_only = FALSE)"},{"path":"https://simnph.github.io/SimNPH/reference/analyse_piecewise_exponential.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Analyse function for piecewise exponential model — analyse_piecewise_exponential","text":"cuts interval boundaries piecewise exponential model testing_only set TRUE omits statistics intervals just returns p value global test.","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_piecewise_exponential.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Analyse function for piecewise exponential model — analyse_piecewise_exponential","text":"analyse function can used runSimulation","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_piecewise_exponential.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Analyse function for piecewise exponential model — analyse_piecewise_exponential","text":"time interval patients ever enter, NA returned time intervals. behavior likely change future package versions.","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_piecewise_exponential.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Analyse function for piecewise exponential model — analyse_piecewise_exponential","text":"","code":"condition <- merge(    assumptions_delayed_effect(),    design_fixed_followup(),    by=NULL  ) |>  head(1) dat <- generate_delayed_effect(condition) analyse_piecewise_exponential(cuts=c(90, 360))(condition, dat) #> $p #> [1] 0.0005337612 #>  #> $hr_s #> # A tibble: 1 × 3 #>   `trt:intervalI1` `trt:intervalI2` `trt:intervalI3` #>              <dbl>            <dbl>            <dbl> #> 1            0.515            0.575            0.636 #>  #> $p_s #> # A tibble: 1 × 3 #>   `trt:intervalI1` `trt:intervalI2` `trt:intervalI3` #>              <dbl>            <dbl>            <dbl> #> 1            0.129           0.0432         0.000815 #>  #> $hr_s_lower #> # A tibble: 1 × 3 #>   `trt:intervalI1` `trt:intervalI2` `trt:intervalI3` #>              <dbl>            <dbl>            <dbl> #> 1            -1.57            -1.10           -0.716 #>  #> $hr_s_upper #> # A tibble: 1 × 3 #>   `trt:intervalI1` `trt:intervalI2` `trt:intervalI3` #>              <dbl>            <dbl>            <dbl> #> 1            0.169          -0.0238           -0.186 #>  #> $N_pat #> [1] 300 #>  #> $N_evt #> [1] 300 #>  #> $interval_table #>      #>        0   1 #>   I1 277  23 #>   I2 221  56 #>   I3   0 221 #>"},{"path":"https://simnph.github.io/SimNPH/reference/analyse_rmst_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyse the Dataset using the difference in RMST — analyse_rmst_diff","title":"Analyse the Dataset using the difference in RMST — analyse_rmst_diff","text":"Analyse Dataset using difference RMST","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_rmst_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyse the Dataset using the difference in RMST — analyse_rmst_diff","text":"","code":"analyse_rmst_diff(max_time = NA, level = 0.95, alternative = \"two.sided\")"},{"path":"https://simnph.github.io/SimNPH/reference/analyse_rmst_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyse the Dataset using the difference in RMST — analyse_rmst_diff","text":"max_time time RMST calculated level confidence level CI computation alternative alternative hypothesis tests \"two.sided\" \"one.sieded\"","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_rmst_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyse the Dataset using the difference in RMST — analyse_rmst_diff","text":"Returns analysis function, can used runSimulations","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_rmst_diff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyse the Dataset using the difference in RMST — analyse_rmst_diff","text":"implementation nph package used, see documentation details. alternative can \"two.sided\" two sided test equality summary statistic \"one.sided\" one sided test testing H0: treatment equal shorter survival control vs. H1 treatment longer survival control. data.frame returned created function includes follwing columns: p p value test, see Details alternative alternative used rmst_diff estimated differnce RMST rmst_diff_lower unadjusted lower bound confidence interval differnce RMST rmst_diff_upper unadjusted upper bound confidence interval differnce RMST CI_level CI level used N_pat number patients N_evt number events","code":""},{"path":[]},{"path":"https://simnph.github.io/SimNPH/reference/analyse_rmst_diff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyse the Dataset using the difference in RMST — analyse_rmst_diff","text":"","code":"condition <- merge(   assumptions_delayed_effect(),   design_fixed_followup(),   by = NULL ) |>   head(1) dat <- generate_delayed_effect(condition) analyse_rmst_diff()(condition, dat) #> $p #> [1] 0.02254084 #>  #> $alternative #> [1] \"two.sided\" #>  #> $rmst_diff #> [1] 297.9007 #>  #> $rmst_diff_lower #> [1] 41.94202 #>  #> $rmst_diff_upper #> [1] 553.8594 #>  #> $CI_level #> [1] 0.95 #>  #> $N_pat #> [1] 300 #>  #> $N_evt #> [1] 300 #>"},{"path":"https://simnph.github.io/SimNPH/reference/analyse_weibull.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyse Dataset with Weibull Regression — analyse_weibull","title":"Analyse Dataset with Weibull Regression — analyse_weibull","text":"Analyse Dataset Weibull Regression","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_weibull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyse Dataset with Weibull Regression — analyse_weibull","text":"","code":"analyse_weibull(level = 0.95, alternative = \"two.sided\")"},{"path":"https://simnph.github.io/SimNPH/reference/analyse_weibull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyse Dataset with Weibull Regression — analyse_weibull","text":"level confidence level CI computation alternative alternative hypothesis tests \"two.sided\" \"one.sieded\"","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_weibull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyse Dataset with Weibull Regression — analyse_weibull","text":"analysis function returns data.frame","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_weibull.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyse Dataset with Weibull Regression — analyse_weibull","text":"columns return two-sided p-value test equal medians. estimated medians treatment control group estimated difference median survival confidence intervals. estimates tests comstructed fitting seperate Weibull regression models treatment control groups estimating medians respective variances delta-method.","code":""},{"path":"https://simnph.github.io/SimNPH/reference/analyse_weibull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyse Dataset with Weibull Regression — analyse_weibull","text":"","code":"condition <- merge(     assumptions_delayed_effect(),     design_fixed_followup(),     by=NULL   ) |>   head(3) |>   tail(1) dat <- generate_delayed_effect(condition) analyse_weibull()(condition, dat) #> $p #> [1] 0.07112782 #>  #> $alternative #> [1] \"two.sided\" #>  #> $med_trt_est #> [1] 778.092 #>  #> $med_trt_lower #> [1] 631.5979 #>  #> $med_trt_upper #> [1] 924.5862 #>  #> $med_ctrl_est #> [1] 1011.487 #>  #> $med_ctrl_lower #> [1] 804.6256 #>  #> $med_ctrl_upper #> [1] 1218.348 #>  #> $diff_med_est #> [1] 233.3947 #>  #> $diff_med_lower #> [1] -20.08522 #>  #> $diff_med_upper #> [1] 486.8746 #>  #> $CI_level #> [1] 0.95 #>  #> $N_pat #> [1] 300 #>  #> $N_evt #> [1] 300 #>"},{"path":"https://simnph.github.io/SimNPH/reference/combination_tests_delayed.html","id":null,"dir":"Reference","previous_headings":"","what":"Results of an example simulation — combination_tests_delayed","title":"Results of an example simulation — combination_tests_delayed","text":"Results example simulation study comparing power logrank max-combo modelstly weighted logrank test differnt scenarios delayed onset treatment effect.","code":""},{"path":"https://simnph.github.io/SimNPH/reference/combination_tests_delayed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Results of an example simulation — combination_tests_delayed","text":"","code":"combination_tests_delayed"},{"path":"https://simnph.github.io/SimNPH/reference/combination_tests_delayed.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Results of an example simulation — combination_tests_delayed","text":"tibble returned SimDesign::runSimulation.","code":""},{"path":"https://simnph.github.io/SimNPH/reference/create_summarise_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a summarise function from a named list of functions — create_summarise_function","title":"Create a summarise function from a named list of functions — create_summarise_function","text":"Create summarise function named list functions","code":""},{"path":"https://simnph.github.io/SimNPH/reference/create_summarise_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a summarise function from a named list of functions — create_summarise_function","text":"","code":"create_summarise_function(...)"},{"path":"https://simnph.github.io/SimNPH/reference/create_summarise_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a summarise function from a named list of functions — create_summarise_function","text":"... summarise function","code":""},{"path":"https://simnph.github.io/SimNPH/reference/create_summarise_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a summarise function from a named list of functions — create_summarise_function","text":"function arguments condition, results, fixed objects","code":""},{"path":"https://simnph.github.io/SimNPH/reference/create_summarise_function.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a summarise function from a named list of functions — create_summarise_function","text":"names list functions correspond names list analyse functions, summarise function applied results analyse function name, names present lists ommitted either list. functions list arguments condition, results fixed_objects. results list lists. outer list one element replication, inner list one entry Analyse function. (Analyse functions return lists work, otherwise results simplified data.frames. Analyse functions SimNPH package return lists.) individual summarise functions return data.frames, concatendated column-wise give one row per condition. names analyse methods prepended respective coumn names, functions \"name\" attribute appended column names output. Column names unique appended numbers make.unique.","code":""},{"path":"https://simnph.github.io/SimNPH/reference/create_summarise_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a summarise function from a named list of functions — create_summarise_function","text":"","code":"Summarise <- create_summarise_function(   maxcombo = function(condition, results, fixed_objects=NULL){     data.frame(\"rejection\"=mean(results$p < alpha))   },   logrank  = function(condition, results, fixed_objects=NULL){     data.frame(\"rejection\"=mean(results$p < alpha))   } )"},{"path":"https://simnph.github.io/SimNPH/reference/design_fixed_followup.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data.frame with an example fixed design — design_fixed_followup","title":"Create a data.frame with an example fixed design — design_fixed_followup","text":"Create data.frame example fixed design","code":""},{"path":"https://simnph.github.io/SimNPH/reference/design_fixed_followup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data.frame with an example fixed design — design_fixed_followup","text":"","code":"design_fixed_followup(print = interactive())"},{"path":"https://simnph.github.io/SimNPH/reference/design_fixed_followup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data.frame with an example fixed design — design_fixed_followup","text":"print print code generate parameter set?","code":""},{"path":"https://simnph.github.io/SimNPH/reference/design_fixed_followup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data.frame with an example fixed design — design_fixed_followup","text":"design_fixed_followup: design tibble default values invisibly","code":""},{"path":"https://simnph.github.io/SimNPH/reference/design_fixed_followup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a data.frame with an example fixed design — design_fixed_followup","text":"design_fixed_followup generates default design data.frame use generate_delayed_effect generate_... functions. print TRUE code produce template also printed copying, pasting editing user. (default run interactive session.)","code":""},{"path":"https://simnph.github.io/SimNPH/reference/design_fixed_followup.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Create a data.frame with an example fixed design — design_fixed_followup","text":"design_fixed_followup(): generate default fixed design","code":""},{"path":"https://simnph.github.io/SimNPH/reference/design_fixed_followup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a data.frame with an example fixed design — design_fixed_followup","text":"","code":"Design <- design_fixed_followup() Design #>   n_trt n_ctrl followup recruitment #> 1   150    150    730.5     182.625"},{"path":"https://simnph.github.io/SimNPH/reference/design_group_sequential.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data.frame with an example group sequential design — design_group_sequential","title":"Create a data.frame with an example group sequential design — design_group_sequential","text":"Create data.frame example group sequential design","code":""},{"path":"https://simnph.github.io/SimNPH/reference/design_group_sequential.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data.frame with an example group sequential design — design_group_sequential","text":"","code":"design_group_sequential(print = interactive())"},{"path":"https://simnph.github.io/SimNPH/reference/design_group_sequential.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data.frame with an example group sequential design — design_group_sequential","text":"print print code generate parameter set?","code":""},{"path":"https://simnph.github.io/SimNPH/reference/design_group_sequential.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data.frame with an example group sequential design — design_group_sequential","text":"design_group_sequential: design tibble default values invisibly","code":""},{"path":"https://simnph.github.io/SimNPH/reference/design_group_sequential.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a data.frame with an example group sequential design — design_group_sequential","text":"design_group_sequential generates default design data.frame use generate_delayed_effect generate_... functions. print TRUE code produce template also printed copying, pasting editing user. (default run interactive session.)","code":""},{"path":"https://simnph.github.io/SimNPH/reference/design_group_sequential.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Create a data.frame with an example group sequential design — design_group_sequential","text":"design_group_sequential(): generate default group sequential design","code":""},{"path":"https://simnph.github.io/SimNPH/reference/design_group_sequential.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a data.frame with an example group sequential design — design_group_sequential","text":"","code":"Design <- design_group_sequential() Design #>   n_trt n_ctrl followup recruitment interim_events final_events #> 1   200    200     1461     182.625            150          300"},{"path":"https://simnph.github.io/SimNPH/reference/generate_crossing_hazards.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Dataset with crossing hazards — generate_crossing_hazards","title":"Generate Dataset with crossing hazards — generate_crossing_hazards","text":"Generate Dataset crossing hazards Create empty assumtions data.frame generate_crossing_hazards Calculate hr crossing hazard functions Calculate true summary statistics scenarios crossing hazards","code":""},{"path":"https://simnph.github.io/SimNPH/reference/generate_crossing_hazards.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Dataset with crossing hazards — generate_crossing_hazards","text":"","code":"generate_crossing_hazards(condition, fixed_objects = NULL)  assumptions_crossing_hazards(print = interactive())  hr_after_crossing_from_PH_effect_size(   design,   target_power_ph = NA_real_,   final_events = NA_real_,   target_alpha = 0.025 )  cen_rate_from_cen_prop_crossing_hazards(design)  true_summary_statistics_crossing_hazards(   Design,   cutoff_stats = NULL,   milestones = NULL,   fixed_objects = NULL )"},{"path":"https://simnph.github.io/SimNPH/reference/generate_crossing_hazards.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Dataset with crossing hazards — generate_crossing_hazards","text":"condition condition row Design dataset fixed_objects additional settings, see details print print code generate parameter set? design design data.frame target_power_ph target power proportional hazards final_events target events inversion Schönfeld Formula, defaults condition$final_events target_alpha target one-sided alpha level power calculation Design Design data.frame crossing hazards cutoff_stats (optionally named) cutoff time, see details milestones (optionally named) vector times milestone survival calculated","code":""},{"path":"https://simnph.github.io/SimNPH/reference/generate_crossing_hazards.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Dataset with crossing hazards — generate_crossing_hazards","text":"generate_crossing_hazards: dataset columns t (time) trt (1=treatment, 0=control), evt (event, currently TRUE observations) assumptions_crossing_hazards: design tibble default values invisibly hr_after_crossing_from_PH_effect_size: design data.frame passed argument additional column hazard_trt. cen_rate_from_cen_prop_crossing_hazards: design data.frame additional column random_withdrawal true_summary_statistics_crossing_hazards: design data.frame passed argument additional columns,","code":""},{"path":"https://simnph.github.io/SimNPH/reference/generate_crossing_hazards.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Dataset with crossing hazards — generate_crossing_hazards","text":"Condidtion contain following columns: n_trt number paitents treatment arm n_ctrl number patients control arm crossing time crossing hazards hazard_ctrl hazard control arm = hazard onset treatment effect hazard_trt_before hazard treatment arm onset treatment effect hazard_trt_after hazard treatment arm afert onset treatment effect fixed_objects given contains element t_max, used cutoff simulation used internally. t_max given way 1-(1/10000) quantile survival distribution control treatment arm used (ever larger). assumptions_crossing_hazards generates default design data.frame use generate_crossing_hazards print TRUE code produce template also printed copying, pasting editing user. (default run interactive session.) hr_after_crossing_from_PH_effect_size calculates hazard ratio crossing hazards follows: First, hazard ratio needed archive desired power proportional hazards calculated inverting Schönfeld's sample size formula. Second median survival times arm hazard ratio proportional hazards calculated. Finally hazard rate treatment arm crossing hazards set median survival time one calculated proportional hazards. heuristic extent arbitrary approach calculate hazard ratios correspond reasonable realistic scenarios. cen_rate_from_cen_prop_crossing_hazards takes proportion censored patients column censoring_prop. column describes proportion patients censored randomly experiencing event, without regard administrative censoring. cutoff_stats times used calculate statistics like average hazard ratios RMST, calculated certain point.","code":""},{"path":"https://simnph.github.io/SimNPH/reference/generate_crossing_hazards.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Generate Dataset with crossing hazards — generate_crossing_hazards","text":"generate_crossing_hazards(): simulates dataset crossing hazards assumptions_crossing_hazards(): generate default assumptions data.frame hr_after_crossing_from_PH_effect_size(): Calculate hr crossing hazards PH effect size cen_rate_from_cen_prop_crossing_hazards(): calculate censoring rate censoring proportion true_summary_statistics_crossing_hazards(): calculate true summary statistics crossing hazards","code":""},{"path":"https://simnph.github.io/SimNPH/reference/generate_crossing_hazards.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Dataset with crossing hazards — generate_crossing_hazards","text":"","code":"one_simulation <- merge(     assumptions_crossing_hazards(),     design_fixed_followup(),     by=NULL   ) |>   head(1) |>   generate_crossing_hazards() head(one_simulation) #>      t trt  evt #> 1  862   1 TRUE #> 2  298   1 TRUE #> 3   41   1 TRUE #> 4 2273   1 TRUE #> 5 1927   1 TRUE #> 6 1050   1 TRUE tail(one_simulation) #>        t trt  evt #> 295  259   0 TRUE #> 296  245   0 TRUE #> 297  788   0 TRUE #> 298 1348   0 TRUE #> 299 1905   0 TRUE #> 300  878   0 TRUE Design <- assumptions_crossing_hazards() Design #>   crossing  hazard_ctrl hazard_trt_before hazard_trt_after random_withdrawal #> 1    0.000 0.0009488668       0.001265156     0.0006325779      0.0001897734 #> 2   60.875 0.0009488668       0.001265156     0.0006325779      0.0001897734 #> 3  121.750 0.0009488668       0.001265156     0.0006325779      0.0001897734 #> 4  182.625 0.0009488668       0.001265156     0.0006325779      0.0001897734 #> 5  243.500 0.0009488668       0.001265156     0.0006325779      0.0001897734 #> 6  304.375 0.0009488668       0.001265156     0.0006325779      0.0001897734 my_design <- merge(     assumptions_crossing_hazards(),     design_fixed_followup(),     by=NULL   )  my_design$final_events <- ceiling((my_design$n_trt + my_design$n_ctrl)*0.75) my_design$hazard_trt <- NA my_design <- hr_after_crossing_from_PH_effect_size(my_design, target_power_ph=0.9) my_design #>   crossing  hazard_ctrl hazard_trt_before hazard_trt_after random_withdrawal #> 1    0.000 0.0009488668       0.001265156     0.0006158887      0.0001897734 #> 2   60.875 0.0009488668       0.001265156     0.0005787618      0.0001897734 #> 3  121.750 0.0009488668       0.001265156     0.0005371313      0.0001897734 #> 4  182.625 0.0009488668       0.001265156     0.0004901248      0.0001897734 #> 5  243.500 0.0009488668       0.001265156     0.0004366293      0.0001897734 #> 6  304.375 0.0009488668       0.001265156     0.0003752012      0.0001897734 #>   n_trt n_ctrl followup recruitment final_events hazard_trt target_median_trt #> 1   150    150    730.5     182.625          225         NA          1125.442 #> 2   150    150    730.5     182.625          225         NA          1125.442 #> 3   150    150    730.5     182.625          225         NA          1125.442 #> 4   150    150    730.5     182.625          225         NA          1125.442 #> 5   150    150    730.5     182.625          225         NA          1125.442 #> 6   150    150    730.5     182.625          225         NA          1125.442 #>   target_hr #> 1 0.6490782 #> 2 0.6490782 #> 3 0.6490782 #> 4 0.6490782 #> 5 0.6490782 #> 6 0.6490782 design <- data.frame(   crossing = c(2, 4, 6),   hazard_ctrl = c(0.05, 0.05, 0.05),   hazard_trt_before = c(0.025, 0.025, 0.025),   hazard_trt_after = c(0.1, 0.1, 0.1),   censoring_prop = c(0.1, 0.3, 0.2),   n_trt = c(50, 50, 50),   n_ctrl = c(50, 50, 50),   followup = c(200, 200, 200),   recruitment = c(50, 50, 50) ) cen_rate_from_cen_prop_crossing_hazards(design) #>   crossing hazard_ctrl hazard_trt_before hazard_trt_after censoring_prop n_trt #> 1        2        0.05             0.025              0.1            0.1    50 #> 2        4        0.05             0.025              0.1            0.3    50 #> 3        6        0.05             0.025              0.1            0.2    50 #>   n_ctrl followup recruitment random_withdrawal #> 1     50      200          50       0.007469191 #> 2     50      200          50       0.029373101 #> 3     50      200          50       0.016885532 my_design <- merge(     assumptions_crossing_hazards(),     design_fixed_followup(),     by=NULL   ) my_design$follwup <- 15 my_design <- true_summary_statistics_crossing_hazards(my_design) my_design #>   crossing  hazard_ctrl hazard_trt_before hazard_trt_after random_withdrawal #> 1    0.000 0.0009488668       0.001265156     0.0006325779      0.0001897734 #> 2   60.875 0.0009488668       0.001265156     0.0006325779      0.0001897734 #> 3  121.750 0.0009488668       0.001265156     0.0006325779      0.0001897734 #> 4  182.625 0.0009488668       0.001265156     0.0006325779      0.0001897734 #> 5  243.500 0.0009488668       0.001265156     0.0006325779      0.0001897734 #> 6  304.375 0.0009488668       0.001265156     0.0006325779      0.0001897734 #>   n_trt n_ctrl followup recruitment follwup median_survival_trt #> 1   150    150    730.5     182.625      15            1095.750 #> 2   150    150    730.5     182.625      15            1034.875 #> 3   150    150    730.5     182.625      15             974.000 #> 4   150    150    730.5     182.625      15             913.125 #> 5   150    150    730.5     182.625      15             852.250 #> 6   150    150    730.5     182.625      15             791.375 #>   median_survival_ctrl #> 1                730.5 #> 2                730.5 #> 3                730.5 #> 4                730.5 #> 5                730.5 #> 6                730.5"},{"path":"https://simnph.github.io/SimNPH/reference/generate_delayed_effect.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Dataset with delayed effect — generate_delayed_effect","title":"Generate Dataset with delayed effect — generate_delayed_effect","text":"Generate Dataset delayed effect Create empty assumtions data.frame generate_delayed_effect Calculate hr onset treatment effect Calculate true summary statistics scenarios delayed treatment effect","code":""},{"path":"https://simnph.github.io/SimNPH/reference/generate_delayed_effect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Dataset with delayed effect — generate_delayed_effect","text":"","code":"generate_delayed_effect(condition, fixed_objects = NULL)  assumptions_delayed_effect(print = interactive())  hr_after_onset_from_PH_effect_size(   design,   target_power_ph = NA_real_,   final_events = NA_real_,   target_alpha = 0.025 )  cen_rate_from_cen_prop_delayed_effect(design)  true_summary_statistics_delayed_effect(   Design,   cutoff_stats = NULL,   milestones = NULL,   fixed_objects = NULL )"},{"path":"https://simnph.github.io/SimNPH/reference/generate_delayed_effect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Dataset with delayed effect — generate_delayed_effect","text":"condition condition row Design dataset fixed_objects additional settings, see details print print code generate parameter set? design design data.frame target_power_ph target power proportional hazards final_events target events inversion Schönfeld Formula defaults condition$final_events target_alpha target one-sided alpha level power calculation Design Design data.frame delayed effect cutoff_stats (optionally named) cutoff times, see details milestones (optionally named) vector times milestone survival calculated","code":""},{"path":"https://simnph.github.io/SimNPH/reference/generate_delayed_effect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Dataset with delayed effect — generate_delayed_effect","text":"generate_delayed_effect: dataset columns t (time) trt (1=treatment, 0=control), evt (event, currently TRUE observations) assumptions_delayed_effect: design tibble default values invisibly hr_after_onset_from_PH_effect_size: design data.frame passed argument additional column hazard_trt. cen_rate_from_cen_prop_delayed_effect: design data.frame additional column random_withdrawal true_summary_statistics_delayed_effect: design data.frame passed argument additional columns","code":""},{"path":"https://simnph.github.io/SimNPH/reference/generate_delayed_effect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Dataset with delayed effect — generate_delayed_effect","text":"Condidtion contain following columns: n_trt number paitents treatment arm n_ctrl number patients control arm delay time onset effect hazard_ctrl hazard control arm = hazard onset treatment effect hazard_trt hazard treatment arm afert onset treatment effect fixed_objects given contains element t_max, used cutoff simulation used internally. t_max given way 1-(1/10000) quantile survival distribution control treatment arm used (ever larger). assumptions_delayed_effect generates default design data.frame use generate_delayed_effect. print TRUE code produce template also printed copying, pasting editing user. (default run interactive session.) hr_after_onset_from_PH_effect_size calculates hazard ratio onset treatment effect follows: First, hazard ratio needed archive desired power proportional hazards calculated inverting Schönfeld's sample size formula. Second median survival times arm hazard ratio proportional hazards calculated. Finally hazard rate treatment arm onset treatment effect set median survival time one calculated proportional hazards. heuristic extent arbitrary approach calculate hazard ratios correspond reasonable realistic scenarios. cen_rate_from_cen_prop_delayed_effect takes proportion censored patients column censoring_prop. column describes proportion patients censored randomly experiencing event, without regard administrative censoring. cutoff_stats times used calculate statistics like average hazard ratios RMST, calculated certain point.","code":""},{"path":"https://simnph.github.io/SimNPH/reference/generate_delayed_effect.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Generate Dataset with delayed effect — generate_delayed_effect","text":"generate_delayed_effect(): simulates dataset delayed treatment effect assumptions_delayed_effect(): generate default assumptions data.frame hr_after_onset_from_PH_effect_size(): Calculate hr onset treatment effect hazards PH effect size cen_rate_from_cen_prop_delayed_effect(): calculate censoring rate censoring proportion true_summary_statistics_delayed_effect(): calculate true summary statistics delayed effect","code":""},{"path":"https://simnph.github.io/SimNPH/reference/generate_delayed_effect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Dataset with delayed effect — generate_delayed_effect","text":"","code":"one_simulation <- merge(     assumptions_delayed_effect(),     design_fixed_followup(),     by=NULL   ) |>   head(1) |>   generate_delayed_effect() head(one_simulation) #>      t trt  evt #> 1 5593   1 TRUE #> 2 3411   1 TRUE #> 3  955   1 TRUE #> 4 1498   1 TRUE #> 5 6771   1 TRUE #> 6  421   1 TRUE tail(one_simulation) #>        t trt  evt #> 295  158   0 TRUE #> 296 1428   0 TRUE #> 297  578   0 TRUE #> 298  964   0 TRUE #> 299 2495   0 TRUE #> 300  572   0 TRUE Design <- assumptions_delayed_effect() Design #>     delay  hazard_ctrl   hazard_trt random_withdrawal #> 1   0.000 0.0009488668 0.0006325779      0.0001897734 #> 2  60.875 0.0009488668 0.0006325779      0.0001897734 #> 3 121.750 0.0009488668 0.0006325779      0.0001897734 #> 4 182.625 0.0009488668 0.0006325779      0.0001897734 #> 5 243.500 0.0009488668 0.0006325779      0.0001897734 #> 6 304.375 0.0009488668 0.0006325779      0.0001897734 my_design <- merge(   assumptions_delayed_effect(),   design_fixed_followup(),   by=NULL )  my_design$hazard_ctrl <- 0.05 my_design$final_events <- ceiling((my_design$n_trt + my_design$n_ctrl)*0.75) my_design$hazard_trt <- NA my_design <- hr_after_onset_from_PH_effect_size(my_design, target_power_ph=0.9) #> Warning: Median survival is shorter than delay of treatment effect, calculation not possible #> Warning: Median survival is shorter than delay of treatment effect, calculation not possible #> Warning: Median survival is shorter than delay of treatment effect, calculation not possible #> Warning: Median survival is shorter than delay of treatment effect, calculation not possible #> Warning: Median survival is shorter than delay of treatment effect, calculation not possible my_design #>     delay hazard_ctrl hazard_trt random_withdrawal n_trt n_ctrl followup #> 1   0.000        0.05 0.03245391      0.0001897734   150    150    730.5 #> 2  60.875        0.05         NA      0.0001897734   150    150    730.5 #> 3 121.750        0.05         NA      0.0001897734   150    150    730.5 #> 4 182.625        0.05         NA      0.0001897734   150    150    730.5 #> 5 243.500        0.05         NA      0.0001897734   150    150    730.5 #> 6 304.375        0.05         NA      0.0001897734   150    150    730.5 #>   recruitment final_events target_median_trt target_hr #> 1     182.625          225          21.35789 0.6490782 #> 2     182.625          225          21.35789 0.6490782 #> 3     182.625          225          21.35789 0.6490782 #> 4     182.625          225          21.35789 0.6490782 #> 5     182.625          225          21.35789 0.6490782 #> 6     182.625          225          21.35789 0.6490782 design <- expand.grid(   delay=seq(0, 10, by=5),            # delay of 0, 1, ..., 10 days   hazard_ctrl=0.2,                   # hazard under control and before treatment effect   hazard_trt=0.02,                   # hazard after onset of treatment effect   censoring_prop=c(0.1, 0.25, 0.01), # 10%, 25%, 1% random censoring   followup=100,                      # followup of 100 days   n_trt=50,                          # 50 patients treatment   n_ctrl=50                          # 50 patients control ) cen_rate_from_cen_prop_delayed_effect(design) #>   delay hazard_ctrl hazard_trt censoring_prop followup n_trt n_ctrl #> 1     0         0.2       0.02           0.10      100    50     50 #> 2     5         0.2       0.02           0.10      100    50     50 #> 3    10         0.2       0.02           0.10      100    50     50 #> 4     0         0.2       0.02           0.25      100    50     50 #> 5     5         0.2       0.02           0.25      100    50     50 #> 6    10         0.2       0.02           0.25      100    50     50 #> 7     0         0.2       0.02           0.01      100    50     50 #> 8     5         0.2       0.02           0.01      100    50     50 #> 9    10         0.2       0.02           0.01      100    50     50 #>   random_withdrawal #> 1      0.0043517713 #> 2      0.0047198579 #> 3      0.0050796441 #> 4      0.0150805823 #> 5      0.0162247001 #> 6      0.0173312396 #> 7      0.0003698016 #> 8      0.0004022565 #> 9      0.0004341304 my_design <- merge(     assumptions_delayed_effect(),     design_fixed_followup(),     by=NULL   ) my_design <- true_summary_statistics_delayed_effect(my_design) my_design #>     delay  hazard_ctrl   hazard_trt random_withdrawal n_trt n_ctrl followup #> 1   0.000 0.0009488668 0.0006325779      0.0001897734   150    150    730.5 #> 2  60.875 0.0009488668 0.0006325779      0.0001897734   150    150    730.5 #> 3 121.750 0.0009488668 0.0006325779      0.0001897734   150    150    730.5 #> 4 182.625 0.0009488668 0.0006325779      0.0001897734   150    150    730.5 #> 5 243.500 0.0009488668 0.0006325779      0.0001897734   150    150    730.5 #> 6 304.375 0.0009488668 0.0006325779      0.0001897734   150    150    730.5 #>   recruitment median_survival_trt median_survival_ctrl #> 1     182.625           1095.7500                730.5 #> 2     182.625           1065.3125                730.5 #> 3     182.625           1034.8750                730.5 #> 4     182.625           1004.4375                730.5 #> 5     182.625            974.0000                730.5 #> 6     182.625            943.5625                730.5"},{"path":"https://simnph.github.io/SimNPH/reference/generate_progression.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an empty assumtions data.frame for generate_progression — assumptions_progression","title":"Create an empty assumtions data.frame for generate_progression — assumptions_progression","text":"Create empty assumtions data.frame generate_progression Generate Dataset changing hazards disease progression Calculate progression rate proportion patients progress Calculate hr onset treatment effect","code":""},{"path":"https://simnph.github.io/SimNPH/reference/generate_progression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an empty assumtions data.frame for generate_progression — assumptions_progression","text":"","code":"assumptions_progression(print = interactive())  generate_progression(condition, fixed_objects = NULL)  true_summary_statistics_progression(   Design,   what = \"os\",   cutoff_stats = NULL,   fixed_objects = NULL,   milestones = NULL )  progression_rate_from_progression_prop(design)  cen_rate_from_cen_prop_progression(design)  hazard_before_progression_from_PH_effect_size(   design,   target_power_ph = NA_real_,   final_events = NA_real_,   target_alpha = 0.025 )"},{"path":"https://simnph.github.io/SimNPH/reference/generate_progression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an empty assumtions data.frame for generate_progression — assumptions_progression","text":"print print code generate parameter set? condition condition row Design dataset fixed_objects additional settings, see details Design Design data.frame subgroup True summary statistics estimand cutoff_stats (optionally named) cutoff time, see details milestones (optionally named) vector times milestone survival calculated design design data.frame target_power_ph target power proportional hazards final_events target events inversion Schönfeld Formula, defaults condition$final_events target_alpha target one-sided alpha level power calculation","code":""},{"path":"https://simnph.github.io/SimNPH/reference/generate_progression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an empty assumtions data.frame for generate_progression — assumptions_progression","text":"generate_progression: design tibble default values invisibly generate_progression: dataset columns t (time) trt (1=treatment, 0=control), evt (event, currently TRUE observations), t_ice (time intercurrent event), ice (intercurrent event) true_summary_statistics_subgroup: design data.frame passed argument additional columns progression_rate_from_progression_prop: design data.frame passed argument additional columns prog_rate_trt, prog_rate_ctrl cen_rate_from_cen_prop_progression: design data.frame additional column random_withdrawal hazard_before_progression_from_PH_effect_size: design data.frame passed argument additional column hazard_trt.","code":""},{"path":"https://simnph.github.io/SimNPH/reference/generate_progression.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an empty assumtions data.frame for generate_progression — assumptions_progression","text":"assumptions_progression generates default design data.frame use generate_progression print TRUE code produce template also printed copying, pasting editing user. (default run interactive session.) Condidtion contain following columns: n_trt number paitents treatment arm n_ctrl number patients control arm hazard_ctrl hazard control arm hazard_trt hazard treatment arm cured patients hazard_after_prog hazard disease progression prog_rate_ctrl hazard rate disease progression unter control prog_rate_trt hazard rate disease progression unter treatment can \"os\" overall survival \"pfs\" progression free survival. fixed_objects contains t_max value used maximum time calculate function like survival, hazard, ... data generating models. given t_max choosen minimum 1-(1/10000) quantile survival distributions model. cutoff_stats times used calculate statistics like average hazard ratios RMST, calculated certain point. progression_rate_from_progression_prop, design data.frame, contain columns prog_prop_trt prog_prop_ctrl proportions patients, progress respective arms. cen_rate_from_cen_prop_progression takes proportion censored patients column censoring_prop. column describes proportion patients censored randomly experiencing event, without regard administrative censoring. hazard_before_progression_from_PH_effect_size calculates hazard ratio onset treatment effect follows: First calculate hazard control arm give median survival exponential model. calculate median survival treatment arm give desired power logrank test exponential models control treatment arm. callibrate hazard progression treatment arm give median survival time. heuristic extent arbitrary approach calculate hazard ratios correspond reasonable realistic scenarios.","code":""},{"path":"https://simnph.github.io/SimNPH/reference/generate_progression.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Create an empty assumtions data.frame for generate_progression — assumptions_progression","text":"assumptions_progression(): generate default assumptions data.frame generate_progression(): simulates dataset changing hazards disease progression true_summary_statistics_progression(): calculate true summary statistics scenarios disease progression progression_rate_from_progression_prop(): Calculate progression rate proportion patients progress cen_rate_from_cen_prop_progression(): calculate censoring rate censoring proportion hazard_before_progression_from_PH_effect_size(): Calculate hazard treatment arm progression PH effect size","code":""},{"path":"https://simnph.github.io/SimNPH/reference/generate_progression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an empty assumtions data.frame for generate_progression — assumptions_progression","text":"","code":"Design <- assumptions_progression() Design #>    hazard_ctrl   hazard_trt hazard_after_prog prog_rate_ctrl prog_rate_trt #> 1 0.0009488668 0.0006325779       0.003795467    0.001897734   0.001897734 #> 2 0.0009488668 0.0006325779       0.003795467    0.001897734   0.001423300 #> 3 0.0009488668 0.0006325779       0.003795467    0.001897734   0.001265156 #>   random_withdrawal #> 1      0.0001897734 #> 2      0.0001897734 #> 3      0.0001897734 one_simulation <- merge(     assumptions_progression(),     design_fixed_followup(),     by=NULL   ) |>   tail(1) |>   generate_progression() head(one_simulation) #>     t trt  evt t_ice  ice #> 1 531   1 TRUE   334 TRUE #> 2 700   1 TRUE   678 TRUE #> 3 172   1 TRUE     4 TRUE #> 4 556   1 TRUE   173 TRUE #> 5 553   1 TRUE   330 TRUE #> 6 201   1 TRUE    77 TRUE tail(one_simulation) #>        t trt  evt t_ice   ice #> 295  344   0 TRUE   Inf FALSE #> 296 1330   0 TRUE   519  TRUE #> 297  243   0 TRUE   Inf FALSE #> 298   73   0 TRUE   Inf FALSE #> 299  134   0 TRUE    37  TRUE #> 300  124   0 TRUE   115  TRUE  my_design <- merge(   assumptions_progression(),   design_fixed_followup(),   by=NULL )  my_design_os  <- true_summary_statistics_progression(my_design, \"os\") my_design_pfs <- true_summary_statistics_progression(my_design, \"pfs\") my_design_os #>    hazard_ctrl   hazard_trt hazard_after_prog prog_rate_ctrl prog_rate_trt #> 1 0.0009488668 0.0006325779       0.003795467    0.001897734   0.001897734 #> 2 0.0009488668 0.0006325779       0.003795467    0.001897734   0.001423300 #> 3 0.0009488668 0.0006325779       0.003795467    0.001897734   0.001265156 #>   random_withdrawal n_trt n_ctrl followup recruitment median_survival_trt #> 1      0.0001897734   150    150    730.5     182.625            479.4919 #> 2      0.0001897734   150    150    730.5     182.625            532.4814 #> 3      0.0001897734   150    150    730.5     182.625            555.2914 #>   median_survival_ctrl #> 1             421.3531 #> 2             421.3531 #> 3             421.3531 my_design_pfs #>    hazard_ctrl   hazard_trt hazard_after_prog prog_rate_ctrl prog_rate_trt #> 1 0.0009488668 0.0006325779       0.003795467    0.001897734   0.001897734 #> 2 0.0009488668 0.0006325779       0.003795467    0.001897734   0.001423300 #> 3 0.0009488668 0.0006325779       0.003795467    0.001897734   0.001265156 #>   random_withdrawal n_trt n_ctrl followup recruitment median_survival_trt #> 1      0.0001897734   150    150    730.5     182.625            273.9375 #> 2      0.0001897734   150    150    730.5     182.625            337.1538 #> 3      0.0001897734   150    150    730.5     182.625            365.2500 #>   median_survival_ctrl #> 1                243.5 #> 2                243.5 #> 3                243.5 my_design <- merge(     assumptions_progression(),     design_fixed_followup(),     by=NULL   ) my_design$prog_rate_ctrl <- NA_real_ my_design$prog_rate_trt <- NA_real_ my_design$prog_prop_trt <- 0.2 my_design$prog_prop_ctrl <- 0.3 my_design <- progression_rate_from_progression_prop(my_design) my_design #>    hazard_ctrl   hazard_trt hazard_after_prog prog_rate_ctrl prog_rate_trt #> 1 0.0009488668 0.0006325779       0.003795467   0.0004066572  0.0001581445 #> 2 0.0009488668 0.0006325779       0.003795467   0.0004066572  0.0001581445 #> 3 0.0009488668 0.0006325779       0.003795467   0.0004066572  0.0001581445 #>   random_withdrawal n_trt n_ctrl followup recruitment prog_prop_trt #> 1      0.0001897734   150    150    730.5     182.625           0.2 #> 2      0.0001897734   150    150    730.5     182.625           0.2 #> 3      0.0001897734   150    150    730.5     182.625           0.2 #>   prog_prop_ctrl #> 1            0.3 #> 2            0.3 #> 3            0.3 design <- expand.grid( hazard_ctrl         = m2r(15),          # hazard under control hazard_trt          = m2r(18),          # hazard under treatment hazard_after_prog   = m2r(3),           # hazard after progression prog_rate_ctrl      = m2r(12),          # hazard for disease progression under control prog_rate_trt       = m2r(c(12,16,18)), # hazard for disease progression under treatment censoring_prop      = 0.1,              # rate of random withdrawal followup            = 100,              # follow up time n_trt               = 50,               # patients in treatment arm n_ctrl              = 50                # patients in control arm ) cen_rate_from_cen_prop_progression(design) #>   hazard_ctrl  hazard_trt hazard_after_prog prog_rate_ctrl prog_rate_trt #> 1 0.001518187 0.001265156       0.007590934    0.001897734   0.001897734 #> 2 0.001518187 0.001265156       0.007590934    0.001897734   0.001423300 #> 3 0.001518187 0.001265156       0.007590934    0.001897734   0.001265156 #>   censoring_prop followup n_trt n_ctrl random_withdrawal #> 1            0.1      100    50     50      0.0003575638 #> 2            0.1      100    50     50      0.0003285652 #> 3            0.1      100    50     50      0.0003179468 # \\donttest{ my_design <- merge(   design_fixed_followup(),   assumptions_progression(),   by=NULL )  my_design$hazard_trt <- NULL my_design$final_events <- ceiling(0.75 * (my_design$n_trt + my_design$n_ctrl))  my_design <- hazard_before_progression_from_PH_effect_size(my_design, target_power_ph=0.7) my_design #>   n_trt n_ctrl followup recruitment  hazard_ctrl hazard_after_prog #> 1   150    150    730.5     182.625 0.0009488668       0.003795467 #> 2   150    150    730.5     182.625 0.0009488668       0.003795467 #> 3   150    150    730.5     182.625 0.0009488668       0.003795467 #>   prog_rate_ctrl prog_rate_trt random_withdrawal final_events   hazard_trt #> 1    0.001897734   0.001897734      0.0001897734          225 0.0001912378 #> 2    0.001897734   0.001423300      0.0001897734          225 0.0004496909 #> 3    0.001897734   0.001265156      0.0001897734          225 0.0005343131 # }"},{"path":"https://simnph.github.io/SimNPH/reference/generate_subgroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Dataset with different treatment effect in subgroup — generate_subgroup","title":"Generate Dataset with different treatment effect in subgroup — generate_subgroup","text":"Generate Dataset different treatment effect subgroup Create empty assumtions data.frame generate_subgroup Calculate true summary statistics scenarios differential treatment effect subgroup Calculate hazards treatment arm subgroup compliment","code":""},{"path":"https://simnph.github.io/SimNPH/reference/generate_subgroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Dataset with different treatment effect in subgroup — generate_subgroup","text":"","code":"generate_subgroup(condition, fixed_objects = NULL)  assumptions_subgroup(print = interactive())  true_summary_statistics_subgroup(   Design,   cutoff_stats = NULL,   milestones = NULL,   fixed_objects = NULL )  hazard_subgroup_from_PH_effect_size(   design,   target_power_ph = NA_real_,   final_events = NA_real_,   target_alpha = 0.025 )  cen_rate_from_cen_prop_subgroup(design)"},{"path":"https://simnph.github.io/SimNPH/reference/generate_subgroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Dataset with different treatment effect in subgroup — generate_subgroup","text":"condition condition row Design dataset fixed_objects additional settings, see details print print code generate parameter set? Design Design data.frame subgroup cutoff_stats (optionally named) cutoff times, see details milestones (optionally named) vector times milestone survival calculated design design data.frame target_power_ph target power proportional hazards final_events target events inversion Schönfeld Formula, defaults condition$final_events target_alpha target one-sided alpha level power calculation","code":""},{"path":"https://simnph.github.io/SimNPH/reference/generate_subgroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Dataset with different treatment effect in subgroup — generate_subgroup","text":"generate_subgroup: dataset columns t (time) trt (1=treatment, 0=control), evt (event, currently TRUE observations) assumptions_subgroup: design tibble default values invisibly true_summary_statistics_subgroup: design data.frame passed argument additional columns hazard_subgroup_from_PH_effect_size: design data.frame passed argument additional columns hazard_trt hazard_subgroup. cen_rate_from_cen_prop_subgroup: design data.frame additional column random_withdrawal","code":""},{"path":"https://simnph.github.io/SimNPH/reference/generate_subgroup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Dataset with different treatment effect in subgroup — generate_subgroup","text":"Condidtion contain following columns: n_trt number paitents treatment arm n_ctrl number patients control arm hazard_ctrl hazard control arm hazard_trt hazard treatment arm cured patients hazard_subgroup hazard subgroup treatment arm prevalence proportion cured patients assumptions_subgroup generates default design data.frame use generate_subgroup print TRUE code produce template also printed copying, pasting editing user. (default run interactive session.) cutoff_stats times used calculate statistics like average hazard ratios RMST, calculated certain point. hazard_subgroup_from_PH_effect_size calculates hazard rate subgroup compliment subgroup treatment arm follows: First, hazard ratio needed archive desired power proportional hazards calculated inverting Schönfeld's sample size formula. Second median survival times arms hazard ratio proportional hazards calculated. Finally hazard rate treatment arm subgroup complement set median survival time one calculated proportional hazards. heuristic extent arbitrary approach calculate hazard ratios correspond reasonable realistic scenarios. cen_rate_from_cen_prop_subgroup takes proportion censored patients column censoring_prop. column describes proportion patients censored randomly experiencing event, without regard administrative censoring.","code":""},{"path":"https://simnph.github.io/SimNPH/reference/generate_subgroup.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Generate Dataset with different treatment effect in subgroup — generate_subgroup","text":"generate_subgroup(): simulates dataset mixture cured patients assumptions_subgroup(): generate default assumptions data.frame true_summary_statistics_subgroup(): calculate true summary statistics subgroup hazard_subgroup_from_PH_effect_size(): Calculate hazards treatement arm cen_rate_from_cen_prop_subgroup(): calculate censoring rate censoring proportion","code":""},{"path":"https://simnph.github.io/SimNPH/reference/generate_subgroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Dataset with different treatment effect in subgroup — generate_subgroup","text":"","code":"one_simulation <- merge(     assumptions_subgroup(),     design_fixed_followup(),     by=NULL   ) |>   head(1) |>   generate_subgroup() head(one_simulation) #>      t trt  evt subgroup #> 1  428   1 TRUE        0 #> 2  132   1 TRUE        0 #> 3 3087   1 TRUE        0 #> 4  734   1 TRUE        0 #> 5  578   1 TRUE        0 #> 6  192   1 TRUE        0 tail(one_simulation) #>        t trt  evt subgroup #> 295 6391   0 TRUE        0 #> 296 2128   0 TRUE        0 #> 297  762   0 TRUE        0 #> 298 2131   0 TRUE        1 #> 299 1323   0 TRUE        0 #> 300  840   0 TRUE        0 Design <- assumptions_subgroup() Design #>    hazard_ctrl   hazard_trt hazard_subgroup prevalence random_withdrawal #> 1 0.0009488668 0.0006325779    9.488668e-05        0.2      0.0001897734 #> 2 0.0009488668 0.0006325779    9.488668e-05        0.4      0.0001897734 #> 3 0.0009488668 0.0006325779    9.488668e-05        0.6      0.0001897734 #> 4 0.0009488668 0.0006325779    9.488668e-05        0.8      0.0001897734 my_design <- merge(     assumptions_subgroup(),     design_fixed_followup(),     by=NULL   ) my_design <- true_summary_statistics_subgroup(my_design) my_design #>    hazard_ctrl   hazard_trt hazard_subgroup prevalence random_withdrawal n_trt #> 1 0.0009488668 0.0006325779    9.488668e-05        0.2      0.0001897734   150 #> 2 0.0009488668 0.0006325779    9.488668e-05        0.4      0.0001897734   150 #> 3 0.0009488668 0.0006325779    9.488668e-05        0.6      0.0001897734   150 #> 4 0.0009488668 0.0006325779    9.488668e-05        0.8      0.0001897734   150 #>   n_ctrl followup recruitment median_survival_trt median_survival_ctrl #> 1    150    730.5     182.625            1422.745                730.5 #> 2    150    730.5     182.625            2001.270                730.5 #> 3    150    730.5     182.625            3143.728                730.5 #> 4    150    730.5     182.625            5119.929                730.5  my_design <- merge(   assumptions_subgroup(),   design_fixed_followup(),   by=NULL )  my_design$hazard_trt <- NA my_design$hazard_subgroup <- NA my_design$hr_subgroup_relative <- 0.9 my_design$final_events <- ceiling((my_design$n_ctrl + my_design$n_trt) * 0.75) my_design <- hazard_subgroup_from_PH_effect_size(my_design, target_power_ph=0.9) my_design #>    hazard_ctrl   hazard_trt hazard_subgroup prevalence random_withdrawal n_trt #> 1 0.0009488668 0.0006288263    0.0005659437        0.2      0.0001897734   150 #> 2 0.0009488668 0.0006421335    0.0005779202        0.4      0.0001897734   150 #> 3 0.0009488668 0.0006558156    0.0005902340        0.6      0.0001897734   150 #> 4 0.0009488668 0.0006698768    0.0006028891        0.8      0.0001897734   150 #>   n_ctrl followup recruitment hr_subgroup_relative final_events #> 1    150    730.5     182.625                  0.9          225 #> 2    150    730.5     182.625                  0.9          225 #> 3    150    730.5     182.625                  0.9          225 #> 4    150    730.5     182.625                  0.9          225 #>   target_median_trt #> 1          1125.442 #> 2          1125.442 #> 3          1125.442 #> 4          1125.442 design <- expand.grid(   hazard_ctrl=0.2,                   # hazard under control and before treatment effect   hazard_trt=0.02,                   # hazard after onset of treatment effect   hazard_subgroup=0.01,              # hazard in the subgroup in treatment   prevalence = c(0.2, 0.5),           # subgroup prevalence   censoring_prop=c(0.1, 0.25, 0.01), # 10%, 25%, 1% random censoring   followup=100,                      # followup of 100 days   n_trt=50,                          # 50 patients treatment   n_ctrl=50                          # 50 patients control ) cen_rate_from_cen_prop_subgroup(design) #>   hazard_ctrl hazard_trt hazard_subgroup prevalence censoring_prop followup #> 1         0.2       0.02            0.01        0.2           0.10      100 #> 2         0.2       0.02            0.01        0.5           0.10      100 #> 3         0.2       0.02            0.01        0.2           0.25      100 #> 4         0.2       0.02            0.01        0.5           0.25      100 #> 5         0.2       0.02            0.01        0.2           0.01      100 #> 6         0.2       0.02            0.01        0.5           0.01      100 #>   n_trt n_ctrl random_withdrawal #> 1    50     50      0.0030440737 #> 2    50     50      0.0026408014 #> 3    50     50      0.0108976367 #> 4    50     50      0.0095627716 #> 5    50     50      0.0002558513 #> 6    50     50      0.0002211651"},{"path":"https://simnph.github.io/SimNPH/reference/labs_from_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Add ggplot axis labels from labels attribute — labs_from_labels","title":"Add ggplot axis labels from labels attribute — labs_from_labels","text":"Add ggplot axis labels labels attribute","code":""},{"path":"https://simnph.github.io/SimNPH/reference/labs_from_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add ggplot axis labels from labels attribute — labs_from_labels","text":"","code":"labs_from_labels(gg)"},{"path":"https://simnph.github.io/SimNPH/reference/labs_from_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add ggplot axis labels from labels attribute — labs_from_labels","text":"gg ggplot object","code":""},{"path":"https://simnph.github.io/SimNPH/reference/labs_from_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add ggplot axis labels from labels attribute — labs_from_labels","text":"ggplot object","code":""},{"path":"https://simnph.github.io/SimNPH/reference/labs_from_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add ggplot axis labels from labels attribute — labs_from_labels","text":"","code":"# \\donttest{ library(\"ggplot2\") test <- mtcars # add a label attribute attr(test$cyl, \"label\") <- \"cylinders\"  # plot witht the variable names as axis titles gg1 <- ggplot(test, aes(x=wt, y=cyl)) +   geom_point() gg1   # add labels where defined in the attribute gg2 <- ggplot(test, aes(x=wt, y=cyl)) +   geom_point()  gg2 <- labs_from_labels(gg2) gg2  # }"},{"path":"https://simnph.github.io/SimNPH/reference/merge_additional_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge results from additional or updated simulations — upsert_merge","title":"Merge results from additional or updated simulations — upsert_merge","text":"Merge results additional updated simulations","code":""},{"path":"https://simnph.github.io/SimNPH/reference/merge_additional_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge results from additional or updated simulations — upsert_merge","text":"","code":"upsert_merge(x, y, by)  merge_additional_results(   old,   new,   design_names = NULL,   descriptive_regex = NULL )"},{"path":"https://simnph.github.io/SimNPH/reference/merge_additional_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge results from additional or updated simulations — upsert_merge","text":"x left data.frame y right data.frame columns match old old results new new/additional results design_names names paramterst descriptive_regex regular expression columns descriptive statistics","code":""},{"path":"https://simnph.github.io/SimNPH/reference/merge_additional_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge results from additional or updated simulations — upsert_merge","text":"data.frame data.frame merged simulation results","code":""},{"path":"https://simnph.github.io/SimNPH/reference/merge_additional_results.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Merge results from additional or updated simulations — upsert_merge","text":"updates columns x values matched rows y add joins columns y present x. Calls rows_upsert full_join. design_names omitted value taken design_names attribute simulation results. descriptive_regex given, columns matching regular expression datasets compared, warning given, values columns match. intended compare descriptive statistics results unchanged analysis methods ensure, results stem exact replication simulation results.","code":""},{"path":"https://simnph.github.io/SimNPH/reference/merge_additional_results.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Merge results from additional or updated simulations — upsert_merge","text":"upsert_merge(): Update add Rows Columns","code":""},{"path":"https://simnph.github.io/SimNPH/reference/merge_additional_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge results from additional or updated simulations — upsert_merge","text":"","code":"a <- data.frame(x=5:2, y=5:2, a=5:2) b <- data.frame(x=1:4, y=1:4+10, b=1:4*10) upsert_merge(a, b, by=\"x\") #>   x  y  a  b #> 1 5  5  5 NA #> 2 4 14  4 40 #> 3 3 13  3 30 #> 4 2 12  2 20 #> 5 1 11 NA 10 # \\donttest{ condition <- merge(   assumptions_delayed_effect(),   design_fixed_followup(),   by=NULL ) |>   tail(4) |>   true_summary_statistics_delayed_effect(cutoff_stats = 15)  condition_1 <- condition[1:2, ] condition_2 <- condition[3:4, ]  # runs simulations sim_results_1 <- runSimulation(   design=condition_1,   replications=100,   generate=generate_delayed_effect,   analyse=list(     logrank  = analyse_logrank(alternative = \"one.sided\"),     maxcombo = analyse_logrank(alternative = \"one.sided\")   ),   summarise = create_summarise_function(     logrank = summarise_test(0.025),     maxcombo = summarise_test(0.025)   ) ) #>  #>  Design: 1/2;   Replications: 100;   RAM Used: 176.5 Mb;   Total Time: 0.00s  #>  Conditions: delay=121., hzrd_c=0.0009, hzrd_t=0.0006, rndm_w=0.0001, n_trt=150, n_ctrl=150, follwp=730., rcrtmn=182., mdn_srvvl_t=1034, mdn_srvvl_c=730., rmst_t_15=14.8, rmst_c_15=14.8, gAHR_1=1, AHR_15=1, AHRc_15=1, AHR__1=1 #>  #>  Design: 2/2;   Replications: 100;   RAM Used: 176.6 Mb;   Total Time: 3.20s  #>  Conditions: delay=182., hzrd_c=0.0009, hzrd_t=0.0006, rndm_w=0.0001, n_trt=150, n_ctrl=150, follwp=730., rcrtmn=182., mdn_srvvl_t=1004, mdn_srvvl_c=730., rmst_t_15=14.8, rmst_c_15=14.8, gAHR_1=1, AHR_15=1, AHRc_15=1, AHR__1=1 #>  #>  #> Simulation complete. Total execution time: 6.18s  sim_results_2 <- runSimulation(   design=condition_2,   replications=100,   generate=generate_delayed_effect,   analyse=list(     logrank  = analyse_logrank(alternative = \"one.sided\"),     maxcombo = analyse_logrank(alternative = \"one.sided\")   ),   summarise = create_summarise_function(     logrank = summarise_test(0.025),     maxcombo = summarise_test(0.025)   ) ) #>  #>  Design: 1/2;   Replications: 100;   RAM Used: 176.8 Mb;   Total Time: 0.00s  #>  Conditions: delay=243., hzrd_c=0.0009, hzrd_t=0.0006, rndm_w=0.0001, n_trt=150, n_ctrl=150, follwp=730., rcrtmn=182., mdn_srvvl_t=974, mdn_srvvl_c=730., rmst_t_15=14.8, rmst_c_15=14.8, gAHR_1=1, AHR_15=1, AHRc_15=1, AHR__1=1 #>  #>  Design: 2/2;   Replications: 100;   RAM Used: 176.8 Mb;   Total Time: 2.97s  #>  Conditions: delay=304., hzrd_c=0.0009, hzrd_t=0.0006, rndm_w=0.0001, n_trt=150, n_ctrl=150, follwp=730., rcrtmn=182., mdn_srvvl_t=943., mdn_srvvl_c=730., rmst_t_15=14.8, rmst_c_15=14.8, gAHR_1=1, AHR_15=1, AHRc_15=1, AHR__1=1 #>  #>  #> Simulation complete. Total execution time: 5.95s  sim_results_3 <- runSimulation(   design=condition,   replications=100,   generate=generate_delayed_effect,   analyse=list(     mwlrt = analyse_modelstly_weighted(t_star = m2d(24))   ),   summarise = create_summarise_function(     mwlrt = summarise_test(0.025)   ) ) #>  #>  Design: 1/4;   Replications: 100;   RAM Used: 177 Mb;   Total Time: 0.00s  #>  Conditions: delay=121., hzrd_c=0.0009, hzrd_t=0.0006, rndm_w=0.0001, n_trt=150, n_ctrl=150, follwp=730., rcrtmn=182., mdn_srvvl_t=1034, mdn_srvvl_c=730., rmst_t_15=14.8, rmst_c_15=14.8, gAHR_1=1, AHR_15=1, AHRc_15=1, AHR__1=1 #>  #>  Design: 2/4;   Replications: 100;   RAM Used: 177 Mb;   Total Time: 0.59s  #>  Conditions: delay=182., hzrd_c=0.0009, hzrd_t=0.0006, rndm_w=0.0001, n_trt=150, n_ctrl=150, follwp=730., rcrtmn=182., mdn_srvvl_t=1004, mdn_srvvl_c=730., rmst_t_15=14.8, rmst_c_15=14.8, gAHR_1=1, AHR_15=1, AHRc_15=1, AHR__1=1 #>  #>  Design: 3/4;   Replications: 100;   RAM Used: 177 Mb;   Total Time: 1.18s  #>  Conditions: delay=243., hzrd_c=0.0009, hzrd_t=0.0006, rndm_w=0.0001, n_trt=150, n_ctrl=150, follwp=730., rcrtmn=182., mdn_srvvl_t=974, mdn_srvvl_c=730., rmst_t_15=14.8, rmst_c_15=14.8, gAHR_1=1, AHR_15=1, AHRc_15=1, AHR__1=1 #>  #>  Design: 4/4;   Replications: 100;   RAM Used: 177.1 Mb;   Total Time: 1.77s  #>  Conditions: delay=304., hzrd_c=0.0009, hzrd_t=0.0006, rndm_w=0.0001, n_trt=150, n_ctrl=150, follwp=730., rcrtmn=182., mdn_srvvl_t=943., mdn_srvvl_c=730., rmst_t_15=14.8, rmst_c_15=14.8, gAHR_1=1, AHR_15=1, AHRc_15=1, AHR__1=1 #>  #>  #> Simulation complete. Total execution time: 2.39s  all_results <- sim_results_1 |>   merge_additional_results(sim_results_2) |>   merge_additional_results(sim_results_3)  all_results |>   subset(select=c(delay, logrank.rejection_0.025, maxcombo.rejection_0.025, mwlrt.rejection_0.025)) #> # A tibble: 4 × 4 #>    delay logrank.rejection_0.025 maxcombo.rejection_0.025 mwlrt.rejection_0.025 #>    <dbl>                   <dbl>                    <dbl>                 <dbl> #> 1 121.75                    0.86                     0.86                  0.93 #> 2 182.62                    0.82                     0.82                  0.82 #> 3 243.5                     0.73                     0.73                  0.86 #> 4 304.38                    0.87                     0.87                  0.81  # }"},{"path":"https://simnph.github.io/SimNPH/reference/mixture_haz_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast implementation of hazard, cumulative hazard, ... for mixtures of subpopulations — mixture_haz_fun","title":"Fast implementation of hazard, cumulative hazard, ... for mixtures of subpopulations — mixture_haz_fun","text":"Fast implementation hazard, cumulative hazard, ... mixtures subpopulations","code":""},{"path":"https://simnph.github.io/SimNPH/reference/mixture_haz_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast implementation of hazard, cumulative hazard, ... for mixtures of subpopulations — mixture_haz_fun","text":"","code":"mixture_haz_fun(p, pdfs, survs)  mixture_cumhaz_fun(p, survs)  mixture_cdf_fun(p, cdfs)  mixture_pdf_fun(p, pdfs)  mixture_surv_fun(p, survs)  mixture_quant_fun(p, cdfs, quants)  mixture_rng_fun(p, rngs)"},{"path":"https://simnph.github.io/SimNPH/reference/mixture_haz_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast implementation of hazard, cumulative hazard, ... for mixtures of subpopulations — mixture_haz_fun","text":"p vector probabilities mixture pdfs list probability density functions mixture components survs list survuval functions mixture components cdfs list cumulative density functions mixture components quants list quantile functions mixture components rngs random number generating functions components","code":""},{"path":"https://simnph.github.io/SimNPH/reference/mixture_haz_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast implementation of hazard, cumulative hazard, ... for mixtures of subpopulations — mixture_haz_fun","text":"function one parameter, vector times/probabilities function evaluated.","code":""},{"path":"https://simnph.github.io/SimNPH/reference/mixture_haz_fun.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fast implementation of hazard, cumulative hazard, ... for mixtures of subpopulations — mixture_haz_fun","text":"last time interval extends +Inf mixture_quant_fun relies numeric root finding therefore fast miniPCH::qpch_fun. mixture_rng samples counts respective mixtures multinomial distribution parameter p samples components shuffles result.","code":""},{"path":"https://simnph.github.io/SimNPH/reference/mixture_haz_fun.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Fast implementation of hazard, cumulative hazard, ... for mixtures of subpopulations — mixture_haz_fun","text":"mixture_haz_fun(): hazard function mixture mixture_cumhaz_fun(): cumulative hazard function mixture mixture_cdf_fun(): cumulative density function mixture mixture_pdf_fun(): probability density function mixture mixture_surv_fun(): survival function mixture mixture_quant_fun(): quantile function mixture mixture_rng_fun(): quantile function mixture","code":""},{"path":"https://simnph.github.io/SimNPH/reference/mixture_haz_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast implementation of hazard, cumulative hazard, ... for mixtures of subpopulations — mixture_haz_fun","text":"","code":"haz <- mixture_haz_fun(   p = c(0.3, 0.7),   pdfs = list(     miniPCH::dpch_fun(0, 0.1),     miniPCH::dpch_fun(c(0,5), c(0.1, 0.12))   ),   survs = list(     miniPCH::spch_fun(0, 0.1),     miniPCH::spch_fun(c(0,5), c(0.1, 0.12))   ) ) plot(haz(seq(0, 30, by=0.15)), ylim=c(0, 0.2), type=\"l\") abline(h=0)  cumhaz <- mixture_cumhaz_fun(   p = c(0.3, 0.7),   survs = list(     miniPCH::spch_fun(0, 0.1),     miniPCH::spch_fun(c(0,5), c(0.1, 0.12))   ) ) plot(cumhaz(seq(0, 30, by=0.15)), type=\"l\")  cdf <- mixture_cdf_fun(   p = c(0.3, 0.7),   cdfs = list(     miniPCH::ppch_fun(0, 0.1),     miniPCH::ppch_fun(c(0,5), c(0.1, 0.12))   ) ) plot(cdf(seq(0, 30, by=0.15)), type=\"l\")  pdf <- mixture_pdf_fun(   p = c(0.3, 0.7),   pdfs = list(     miniPCH::dpch_fun(0, 0.1),     miniPCH::dpch_fun(c(0,5), c(0.1, 0.12))   ) ) plot(pdf(seq(0, 30, by=0.15)), type=\"l\")  surv <- mixture_surv_fun(   p = c(0.3, 0.7),   survs = list(     miniPCH::spch_fun(0, 0.1),     miniPCH::spch_fun(c(0,5), c(0.1, 0.12))   ) ) plot(surv(seq(0, 30, by=0.15)), type=\"l\")   quant <- mixture_quant_fun(   p = c(0.3, 0.7),   cdfs = list(     miniPCH::ppch_fun(0, 0.1),     miniPCH::ppch_fun(c(0,5), c(0.1, 0.12))   ),   quants = list(     miniPCH::qpch_fun(0, 0.1),     miniPCH::qpch_fun(c(0,5), c(0.1, 0.12))   ) )  x <- seq(0, 1, by=0.015) plot(x, quant(x), type=\"l\")  rng <- mixture_rng_fun(   p = c(0.3, 0.7),   rngs = list(     miniPCH::rpch_fun(0, 0.1, discrete = TRUE),     miniPCH::rpch_fun(c(0,5), c(0.1, 0.12), discrete = TRUE)   ) ) hist(rng(100))"},{"path":"https://simnph.github.io/SimNPH/reference/progression_cdf_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast implementation of cumulative density function, survival function, ... for scenarios with progression — progression_cdf_fun","title":"Fast implementation of cumulative density function, survival function, ... for scenarios with progression — progression_cdf_fun","text":"Fast implementation cumulative density function, survival function, ... scenarios progression","code":""},{"path":"https://simnph.github.io/SimNPH/reference/progression_cdf_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast implementation of cumulative density function, survival function, ... for scenarios with progression — progression_cdf_fun","text":"","code":"progression_cdf_fun(hazard_before, prog_rate, hazard_after)  progression_surv_fun(hazard_before, prog_rate, hazard_after)  progression_pdf_fun(hazard_before, prog_rate, hazard_after)  progression_haz_fun(hazard_before, prog_rate, hazard_after)  progression_quant_fun(hazard_before, prog_rate, hazard_after)"},{"path":"https://simnph.github.io/SimNPH/reference/progression_cdf_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast implementation of cumulative density function, survival function, ... for scenarios with progression — progression_cdf_fun","text":"hazard_before hazard death progression prog_rate hazard rate progression hazard_after hazard death progression","code":""},{"path":"https://simnph.github.io/SimNPH/reference/progression_cdf_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast implementation of cumulative density function, survival function, ... for scenarios with progression — progression_cdf_fun","text":"function one parameter, vector times/probabilities function evaluated.","code":""},{"path":"https://simnph.github.io/SimNPH/reference/progression_cdf_fun.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fast implementation of cumulative density function, survival function, ... for scenarios with progression — progression_cdf_fun","text":"Calculations done viewing disease process three state (non-progressed disease, progressed disease, death) continuous time markov chain. Calculations can easily done using matrix exponential function Q-matrices.","code":""},{"path":"https://simnph.github.io/SimNPH/reference/progression_cdf_fun.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Fast implementation of cumulative density function, survival function, ... for scenarios with progression — progression_cdf_fun","text":"progression_cdf_fun(): cumulative density function progression scenario progression_surv_fun(): survival function progression scenario progression_pdf_fun(): probability density function progression scenario progression_haz_fun(): hazard function progression scenario progression_quant_fun(): quantile function progression scenario","code":""},{"path":"https://simnph.github.io/SimNPH/reference/progression_cdf_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast implementation of cumulative density function, survival function, ... for scenarios with progression — progression_cdf_fun","text":"","code":"cdf <- progression_cdf_fun(   hazard_before = m2r(48),   prog_rate = m2r(18),   hazard_after = m2r(6) ) t <- 0:1000 plot(t, cdf(t), type=\"l\")  surv <- progression_surv_fun(   hazard_before = m2r(48),   prog_rate = m2r(18),   hazard_after = m2r(6) ) t <- 0:1000 plot(t, surv(t), type=\"l\")  pdf <- progression_pdf_fun(   hazard_before = m2r(48),   prog_rate = m2r(18),   hazard_after = m2r(6) ) t <- 0:1000 plot(t, pdf(t), type=\"l\")  haz <- progression_haz_fun(   hazard_before = m2r(48),   prog_rate = m2r(18),   hazard_after = m2r(6) ) t <- 0:1000 plot(t, haz(t), type=\"l\")  quant <- progression_quant_fun(   hazard_before = m2r(48),   prog_rate = m2r(18),   hazard_after = m2r(6) ) p <- seq(0,0.99, by=.01) plot(p, quant(p), type=\"l\")"},{"path":"https://simnph.github.io/SimNPH/reference/r2m.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions to Convert Between Days and Months and Medians and Rates — r2m","title":"Functions to Convert Between Days and Months and Medians and Rates — r2m","text":"functions convert days months rates medians.","code":""},{"path":"https://simnph.github.io/SimNPH/reference/r2m.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions to Convert Between Days and Months and Medians and Rates — r2m","text":"","code":"r2m(lambda)  m2r(med)  m2d(mon)  d2m(day)"},{"path":"https://simnph.github.io/SimNPH/reference/r2m.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions to Convert Between Days and Months and Medians and Rates — r2m","text":"lambda hazard rate med median months mon time months day time days","code":""},{"path":"https://simnph.github.io/SimNPH/reference/r2m.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions to Convert Between Days and Months and Medians and Rates — r2m","text":"median survival time months (r2m) hazard rate per day (m2r) time days (m2d) time months (d2m)","code":""},{"path":"https://simnph.github.io/SimNPH/reference/r2m.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Functions to Convert Between Days and Months and Medians and Rates — r2m","text":"r2m(): daily rate median months m2r(): median months daily rate m2d(): months days d2m(): days months","code":""},{"path":"https://simnph.github.io/SimNPH/reference/r2m.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functions to Convert Between Days and Months and Medians and Rates — r2m","text":"","code":"r2m(0.002) #> [1] 11.3864 m2r(12) #> [1] 0.001897734 m2d(1) #> [1] 30.4375 d2m(31) #> [1] 1.01848"},{"path":"https://simnph.github.io/SimNPH/reference/random_censoring_exp.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply Random Exponentially Distributed Censoring — random_censoring_exp","title":"Apply Random Exponentially Distributed Censoring — random_censoring_exp","text":"Apply Random Exponentially Distributed Censoring","code":""},{"path":"https://simnph.github.io/SimNPH/reference/random_censoring_exp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply Random Exponentially Distributed Censoring — random_censoring_exp","text":"","code":"random_censoring_exp(dat, rate, discrete = TRUE)"},{"path":"https://simnph.github.io/SimNPH/reference/random_censoring_exp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply Random Exponentially Distributed Censoring — random_censoring_exp","text":"dat dataset apply random censoring rate time end enrollment discrete censoring times rounded whole days?","code":""},{"path":"https://simnph.github.io/SimNPH/reference/random_censoring_exp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply Random Exponentially Distributed Censoring — random_censoring_exp","text":"Returns Function one argument dat modifies dataset generated generate functions censoring times setting event indicator FALSE censored observations.","code":""},{"path":"https://simnph.github.io/SimNPH/reference/random_censoring_exp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply Random Exponentially Distributed Censoring — random_censoring_exp","text":"","code":"one_simulation <- merge(   assumptions_delayed_effect(),   design_fixed_followup(),   by=NULL ) |>   head(1) |>   generate_delayed_effect()  # apply censoring to dataset censored_sim <- random_censoring_exp(one_simulation, 0.01)  # plot # uncensored (blue) observations are the same for original and modified # dataset # censored (red) observations are smaller than the uncensored ones plot(   one_simulation$t,   censored_sim$t,   col=ifelse(censored_sim$evt, \"blue\", \"red\"),   xlab = \"uncensored times\",   ylab = \"censored times\" ) abline(0,1)"},{"path":"https://simnph.github.io/SimNPH/reference/rename_results_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename Columns in Simulation Results and Update Attributes — rename_results_column","title":"Rename Columns in Simulation Results and Update Attributes — rename_results_column","text":"Rename Columns Simulation Results Update Attributes","code":""},{"path":"https://simnph.github.io/SimNPH/reference/rename_results_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename Columns in Simulation Results and Update Attributes — rename_results_column","text":"","code":"rename_results_column(results, rename)  rename_results_column_pattern(results, pattern, replacement)"},{"path":"https://simnph.github.io/SimNPH/reference/rename_results_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename Columns in Simulation Results and Update Attributes — rename_results_column","text":"results SimDesign object rename named vector new names pattern regexp pattern understood stringr::str_replace_all replacement replacement understood stringr::str_replace_all","code":""},{"path":"https://simnph.github.io/SimNPH/reference/rename_results_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename Columns in Simulation Results and Update Attributes — rename_results_column","text":"SimDesign object updated column names","code":""},{"path":"https://simnph.github.io/SimNPH/reference/rename_results_column.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Rename Columns in Simulation Results and Update Attributes — rename_results_column","text":"rename_results_column(): Rename Columns Simulation Results rename_results_column_pattern(): Rename Columns Simulation Results Pattern","code":""},{"path":"https://simnph.github.io/SimNPH/reference/rename_results_column.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename Columns in Simulation Results and Update Attributes — rename_results_column","text":"","code":"# \\donttest{ condition <- merge( assumptions_delayed_effect(), design_fixed_followup(), by=NULL ) |>   tail(4) |>   true_summary_statistics_delayed_effect(cutoff_stats = 15)  sim_results <- runSimulation(   design=condition,   replications=10,   generate=generate_delayed_effect,   analyse=list(     logrank  = analyse_logrank(alternative = \"one.sided\"),     mwlrt = analyse_modelstly_weighted(t_star = m2d(24))   ),   summarise = create_summarise_function(     logrank = summarise_test(0.025),     mwlrt = summarise_test(0.025)   ) ) #>  #>  Design: 1/4;   Replications: 10;   RAM Used: 177.1 Mb;   Total Time: 0.00s  #>  Conditions: delay=121., hzrd_c=0.0009, hzrd_t=0.0006, rndm_w=0.0001, n_trt=150, n_ctrl=150, follwp=730., rcrtmn=182., mdn_srvvl_t=1034, mdn_srvvl_c=730., rmst_t_15=14.8, rmst_c_15=14.8, gAHR_1=1, AHR_15=1, AHRc_15=1, AHR__1=1 #>  #>  Design: 2/4;   Replications: 10;   RAM Used: 177.1 Mb;   Total Time: 0.22s  #>  Conditions: delay=182., hzrd_c=0.0009, hzrd_t=0.0006, rndm_w=0.0001, n_trt=150, n_ctrl=150, follwp=730., rcrtmn=182., mdn_srvvl_t=1004, mdn_srvvl_c=730., rmst_t_15=14.8, rmst_c_15=14.8, gAHR_1=1, AHR_15=1, AHRc_15=1, AHR__1=1 #>  #>  Design: 3/4;   Replications: 10;   RAM Used: 177.1 Mb;   Total Time: 0.42s  #>  Conditions: delay=243., hzrd_c=0.0009, hzrd_t=0.0006, rndm_w=0.0001, n_trt=150, n_ctrl=150, follwp=730., rcrtmn=182., mdn_srvvl_t=974, mdn_srvvl_c=730., rmst_t_15=14.8, rmst_c_15=14.8, gAHR_1=1, AHR_15=1, AHRc_15=1, AHR__1=1 #>  #>  Design: 4/4;   Replications: 10;   RAM Used: 177.2 Mb;   Total Time: 0.63s  #>  Conditions: delay=304., hzrd_c=0.0009, hzrd_t=0.0006, rndm_w=0.0001, n_trt=150, n_ctrl=150, follwp=730., rcrtmn=182., mdn_srvvl_t=943., mdn_srvvl_c=730., rmst_t_15=14.8, rmst_c_15=14.8, gAHR_1=1, AHR_15=1, AHRc_15=1, AHR__1=1 #>  #>  #> Simulation complete. Total execution time: 0.84s  names(sim_results) #>  [1] \"delay\"                   \"hazard_ctrl\"             #>  [3] \"hazard_trt\"              \"random_withdrawal\"       #>  [5] \"n_trt\"                   \"n_ctrl\"                  #>  [7] \"followup\"                \"recruitment\"             #>  [9] \"median_survival_trt\"     \"median_survival_ctrl\"    #> [11] \"rmst_trt_15\"             \"rmst_ctrl_15\"            #> [13] \"gAHR_15\"                 \"AHR_15\"                  #> [15] \"AHRoc_15\"                \"AHRoc_robust_15\"         #> [17] \"logrank.rejection_0.025\" \"logrank.N_missing_0.025\" #> [19] \"logrank.N\"               \"logrank.mean_n_pat\"      #> [21] \"logrank.sd_n_pat\"        \"logrank.mean_n_evt\"      #> [23] \"logrank.sd_n_evt\"        \"logrank.N_missing_n_pat\" #> [25] \"logrank.N_missing_n_evt\" \"mwlrt.rejection_0.025\"   #> [27] \"mwlrt.N_missing_0.025\"   \"mwlrt.N\"                 #> [29] \"mwlrt.mean_n_pat\"        \"mwlrt.sd_n_pat\"          #> [31] \"mwlrt.mean_n_evt\"        \"mwlrt.sd_n_evt\"          #> [33] \"mwlrt.N_missing_n_pat\"   \"mwlrt.N_missing_n_evt\"   #> [35] \"REPLICATIONS\"            \"SIM_TIME\"                #> [37] \"RAM_USED\"                \"SEED\"                    #> [39] \"COMPLETED\"               attr(sim_results, \"design_names\") #> $design #>  [1] \"delay\"                \"hazard_ctrl\"          \"hazard_trt\"           #>  [4] \"random_withdrawal\"    \"n_trt\"                \"n_ctrl\"               #>  [7] \"followup\"             \"recruitment\"          \"median_survival_trt\"  #> [10] \"median_survival_ctrl\" \"rmst_trt_15\"          \"rmst_ctrl_15\"         #> [13] \"gAHR_15\"              \"AHR_15\"               \"AHRoc_15\"             #> [16] \"AHRoc_robust_15\"      #>  #> $sim #>  [1] \"logrank.rejection_0.025\" \"logrank.N_missing_0.025\" #>  [3] \"logrank.N\"               \"logrank.mean_n_pat\"      #>  [5] \"logrank.sd_n_pat\"        \"logrank.mean_n_evt\"      #>  [7] \"logrank.sd_n_evt\"        \"logrank.N_missing_n_pat\" #>  [9] \"logrank.N_missing_n_evt\" \"mwlrt.rejection_0.025\"   #> [11] \"mwlrt.N_missing_0.025\"   \"mwlrt.N\"                 #> [13] \"mwlrt.mean_n_pat\"        \"mwlrt.sd_n_pat\"          #> [15] \"mwlrt.mean_n_evt\"        \"mwlrt.sd_n_evt\"          #> [17] \"mwlrt.N_missing_n_pat\"   \"mwlrt.N_missing_n_evt\"   #>  #> $bootCI #> character(0) #>  #> $extra #> [1] \"REPLICATIONS\" \"SIM_TIME\"     \"RAM_USED\"     \"SEED\"         \"COMPLETED\"    #>  #> $errors #> [1] \"ERRORS\" #>  #> $warnings #> [1] \"WARNINGS\" #>   sim_results <- sim_results |>   rename_results_column(c(\"delay\"=\"onset\"))  names(sim_results) #>  [1] \"onset\"                   \"hazard_ctrl\"             #>  [3] \"hazard_trt\"              \"random_withdrawal\"       #>  [5] \"n_trt\"                   \"n_ctrl\"                  #>  [7] \"followup\"                \"recruitment\"             #>  [9] \"median_survival_trt\"     \"median_survival_ctrl\"    #> [11] \"rmst_trt_15\"             \"rmst_ctrl_15\"            #> [13] \"gAHR_15\"                 \"AHR_15\"                  #> [15] \"AHRoc_15\"                \"AHRoc_robust_15\"         #> [17] \"logrank.rejection_0.025\" \"logrank.N_missing_0.025\" #> [19] \"logrank.N\"               \"logrank.mean_n_pat\"      #> [21] \"logrank.sd_n_pat\"        \"logrank.mean_n_evt\"      #> [23] \"logrank.sd_n_evt\"        \"logrank.N_missing_n_pat\" #> [25] \"logrank.N_missing_n_evt\" \"mwlrt.rejection_0.025\"   #> [27] \"mwlrt.N_missing_0.025\"   \"mwlrt.N\"                 #> [29] \"mwlrt.mean_n_pat\"        \"mwlrt.sd_n_pat\"          #> [31] \"mwlrt.mean_n_evt\"        \"mwlrt.sd_n_evt\"          #> [33] \"mwlrt.N_missing_n_pat\"   \"mwlrt.N_missing_n_evt\"   #> [35] \"REPLICATIONS\"            \"SIM_TIME\"                #> [37] \"RAM_USED\"                \"SEED\"                    #> [39] \"COMPLETED\"               attr(sim_results, \"design_names\") #> $design #>  [1] \"onset\"                \"hazard_ctrl\"          \"hazard_trt\"           #>  [4] \"random_withdrawal\"    \"n_trt\"                \"n_ctrl\"               #>  [7] \"followup\"             \"recruitment\"          \"median_survival_trt\"  #> [10] \"median_survival_ctrl\" \"rmst_trt_15\"          \"rmst_ctrl_15\"         #> [13] \"gAHR_15\"              \"AHR_15\"               \"AHRoc_15\"             #> [16] \"AHRoc_robust_15\"      #>  #> $sim #>  [1] \"logrank.rejection_0.025\" \"logrank.N_missing_0.025\" #>  [3] \"logrank.N\"               \"logrank.mean_n_pat\"      #>  [5] \"logrank.sd_n_pat\"        \"logrank.mean_n_evt\"      #>  [7] \"logrank.sd_n_evt\"        \"logrank.N_missing_n_pat\" #>  [9] \"logrank.N_missing_n_evt\" \"mwlrt.rejection_0.025\"   #> [11] \"mwlrt.N_missing_0.025\"   \"mwlrt.N\"                 #> [13] \"mwlrt.mean_n_pat\"        \"mwlrt.sd_n_pat\"          #> [15] \"mwlrt.mean_n_evt\"        \"mwlrt.sd_n_evt\"          #> [17] \"mwlrt.N_missing_n_pat\"   \"mwlrt.N_missing_n_evt\"   #>  #> $bootCI #> character(0) #>  #> $extra #> [1] \"REPLICATIONS\" \"SIM_TIME\"     \"RAM_USED\"     \"SEED\"         \"COMPLETED\"    #>  #> $errors #> [1] \"ERRORS\" #>  #> $warnings #> [1] \"WARNINGS\" #>  # } # \\donttest{   condition <- merge(     assumptions_delayed_effect(),     design_fixed_followup(),     by=NULL   ) |>     tail(4) |>     true_summary_statistics_delayed_effect(cutoff_stats = 15)    sim_results <- runSimulation(     design=condition,     replications=10,     generate=generate_delayed_effect,     analyse=list(       logrank  = analyse_logrank(alternative = \"one.sided\"),       mwlrt = analyse_modelstly_weighted(t_star = m2d(24))     ),     summarise = create_summarise_function(       logrank = summarise_test(0.025),       mwlrt = summarise_test(0.025)     )   ) #>  #>  Design: 1/4;   Replications: 10;   RAM Used: 177.3 Mb;   Total Time: 0.00s  #>  Conditions: delay=121., hzrd_c=0.0009, hzrd_t=0.0006, rndm_w=0.0001, n_trt=150, n_ctrl=150, follwp=730., rcrtmn=182., mdn_srvvl_t=1034, mdn_srvvl_c=730., rmst_t_15=14.8, rmst_c_15=14.8, gAHR_1=1, AHR_15=1, AHRc_15=1, AHR__1=1 #>  #>  Design: 2/4;   Replications: 10;   RAM Used: 177.2 Mb;   Total Time: 0.21s  #>  Conditions: delay=182., hzrd_c=0.0009, hzrd_t=0.0006, rndm_w=0.0001, n_trt=150, n_ctrl=150, follwp=730., rcrtmn=182., mdn_srvvl_t=1004, mdn_srvvl_c=730., rmst_t_15=14.8, rmst_c_15=14.8, gAHR_1=1, AHR_15=1, AHRc_15=1, AHR__1=1 #>  #>  Design: 3/4;   Replications: 10;   RAM Used: 177.2 Mb;   Total Time: 0.42s  #>  Conditions: delay=243., hzrd_c=0.0009, hzrd_t=0.0006, rndm_w=0.0001, n_trt=150, n_ctrl=150, follwp=730., rcrtmn=182., mdn_srvvl_t=974, mdn_srvvl_c=730., rmst_t_15=14.8, rmst_c_15=14.8, gAHR_1=1, AHR_15=1, AHRc_15=1, AHR__1=1 #>  #>  Design: 4/4;   Replications: 10;   RAM Used: 177.2 Mb;   Total Time: 0.64s  #>  Conditions: delay=304., hzrd_c=0.0009, hzrd_t=0.0006, rndm_w=0.0001, n_trt=150, n_ctrl=150, follwp=730., rcrtmn=182., mdn_srvvl_t=943., mdn_srvvl_c=730., rmst_t_15=14.8, rmst_c_15=14.8, gAHR_1=1, AHR_15=1, AHRc_15=1, AHR__1=1 #>  #>  #> Simulation complete. Total execution time: 0.85s    names(sim_results) #>  [1] \"delay\"                   \"hazard_ctrl\"             #>  [3] \"hazard_trt\"              \"random_withdrawal\"       #>  [5] \"n_trt\"                   \"n_ctrl\"                  #>  [7] \"followup\"                \"recruitment\"             #>  [9] \"median_survival_trt\"     \"median_survival_ctrl\"    #> [11] \"rmst_trt_15\"             \"rmst_ctrl_15\"            #> [13] \"gAHR_15\"                 \"AHR_15\"                  #> [15] \"AHRoc_15\"                \"AHRoc_robust_15\"         #> [17] \"logrank.rejection_0.025\" \"logrank.N_missing_0.025\" #> [19] \"logrank.N\"               \"logrank.mean_n_pat\"      #> [21] \"logrank.sd_n_pat\"        \"logrank.mean_n_evt\"      #> [23] \"logrank.sd_n_evt\"        \"logrank.N_missing_n_pat\" #> [25] \"logrank.N_missing_n_evt\" \"mwlrt.rejection_0.025\"   #> [27] \"mwlrt.N_missing_0.025\"   \"mwlrt.N\"                 #> [29] \"mwlrt.mean_n_pat\"        \"mwlrt.sd_n_pat\"          #> [31] \"mwlrt.mean_n_evt\"        \"mwlrt.sd_n_evt\"          #> [33] \"mwlrt.N_missing_n_pat\"   \"mwlrt.N_missing_n_evt\"   #> [35] \"REPLICATIONS\"            \"SIM_TIME\"                #> [37] \"RAM_USED\"                \"SEED\"                    #> [39] \"COMPLETED\"                 attr(sim_results, \"design_names\") #> $design #>  [1] \"delay\"                \"hazard_ctrl\"          \"hazard_trt\"           #>  [4] \"random_withdrawal\"    \"n_trt\"                \"n_ctrl\"               #>  [7] \"followup\"             \"recruitment\"          \"median_survival_trt\"  #> [10] \"median_survival_ctrl\" \"rmst_trt_15\"          \"rmst_ctrl_15\"         #> [13] \"gAHR_15\"              \"AHR_15\"               \"AHRoc_15\"             #> [16] \"AHRoc_robust_15\"      #>  #> $sim #>  [1] \"logrank.rejection_0.025\" \"logrank.N_missing_0.025\" #>  [3] \"logrank.N\"               \"logrank.mean_n_pat\"      #>  [5] \"logrank.sd_n_pat\"        \"logrank.mean_n_evt\"      #>  [7] \"logrank.sd_n_evt\"        \"logrank.N_missing_n_pat\" #>  [9] \"logrank.N_missing_n_evt\" \"mwlrt.rejection_0.025\"   #> [11] \"mwlrt.N_missing_0.025\"   \"mwlrt.N\"                 #> [13] \"mwlrt.mean_n_pat\"        \"mwlrt.sd_n_pat\"          #> [15] \"mwlrt.mean_n_evt\"        \"mwlrt.sd_n_evt\"          #> [17] \"mwlrt.N_missing_n_pat\"   \"mwlrt.N_missing_n_evt\"   #>  #> $bootCI #> character(0) #>  #> $extra #> [1] \"REPLICATIONS\" \"SIM_TIME\"     \"RAM_USED\"     \"SEED\"         \"COMPLETED\"    #>  #> $errors #> [1] \"ERRORS\" #>  #> $warnings #> [1] \"WARNINGS\" #>     sim_results <- sim_results |>     rename_results_column_pattern(pattern = \"_0.025\", replacement = \"\")    names(sim_results) #>  [1] \"delay\"                   \"hazard_ctrl\"             #>  [3] \"hazard_trt\"              \"random_withdrawal\"       #>  [5] \"n_trt\"                   \"n_ctrl\"                  #>  [7] \"followup\"                \"recruitment\"             #>  [9] \"median_survival_trt\"     \"median_survival_ctrl\"    #> [11] \"rmst_trt_15\"             \"rmst_ctrl_15\"            #> [13] \"gAHR_15\"                 \"AHR_15\"                  #> [15] \"AHRoc_15\"                \"AHRoc_robust_15\"         #> [17] \"logrank.rejection\"       \"logrank.N_missing\"       #> [19] \"logrank.N\"               \"logrank.mean_n_pat\"      #> [21] \"logrank.sd_n_pat\"        \"logrank.mean_n_evt\"      #> [23] \"logrank.sd_n_evt\"        \"logrank.N_missing_n_pat\" #> [25] \"logrank.N_missing_n_evt\" \"mwlrt.rejection\"         #> [27] \"mwlrt.N_missing\"         \"mwlrt.N\"                 #> [29] \"mwlrt.mean_n_pat\"        \"mwlrt.sd_n_pat\"          #> [31] \"mwlrt.mean_n_evt\"        \"mwlrt.sd_n_evt\"          #> [33] \"mwlrt.N_missing_n_pat\"   \"mwlrt.N_missing_n_evt\"   #> [35] \"REPLICATIONS\"            \"SIM_TIME\"                #> [37] \"RAM_USED\"                \"SEED\"                    #> [39] \"COMPLETED\"                 attr(sim_results, \"design_names\") #> $design #>  [1] \"delay\"                \"hazard_ctrl\"          \"hazard_trt\"           #>  [4] \"random_withdrawal\"    \"n_trt\"                \"n_ctrl\"               #>  [7] \"followup\"             \"recruitment\"          \"median_survival_trt\"  #> [10] \"median_survival_ctrl\" \"rmst_trt_15\"          \"rmst_ctrl_15\"         #> [13] \"gAHR_15\"              \"AHR_15\"               \"AHRoc_15\"             #> [16] \"AHRoc_robust_15\"      #>  #> $sim #>  [1] \"logrank.rejection\"       \"logrank.N_missing\"       #>  [3] \"logrank.N\"               \"logrank.mean_n_pat\"      #>  [5] \"logrank.sd_n_pat\"        \"logrank.mean_n_evt\"      #>  [7] \"logrank.sd_n_evt\"        \"logrank.N_missing_n_pat\" #>  [9] \"logrank.N_missing_n_evt\" \"mwlrt.rejection\"         #> [11] \"mwlrt.N_missing\"         \"mwlrt.N\"                 #> [13] \"mwlrt.mean_n_pat\"        \"mwlrt.sd_n_pat\"          #> [15] \"mwlrt.mean_n_evt\"        \"mwlrt.sd_n_evt\"          #> [17] \"mwlrt.N_missing_n_pat\"   \"mwlrt.N_missing_n_evt\"   #>  #> $bootCI #> character(0) #>  #> $extra #> [1] \"REPLICATIONS\" \"SIM_TIME\"     \"RAM_USED\"     \"SEED\"         \"COMPLETED\"    #>  #> $errors #> [1] \"ERRORS\" #>  #> $warnings #> [1] \"WARNINGS\" #>  # }"},{"path":"https://simnph.github.io/SimNPH/reference/results_pivot_longer.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions for Plotting and Reporting Results — results_pivot_longer","title":"Functions for Plotting and Reporting Results — results_pivot_longer","text":"Functions Plotting Reporting Results","code":""},{"path":"https://simnph.github.io/SimNPH/reference/results_pivot_longer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions for Plotting and Reporting Results — results_pivot_longer","text":"","code":"results_pivot_longer(data, exclude_from_methods = c(\"descriptive\"))  combined_plot(   data,   methods,   xvars,   yvar,   facet_x_vars = c(),   facet_y_vars = c(),   split_var = 1,   heights_plots = c(3, 1),   scale_stairs = NULL,   grid_level = 2,   scales = \"fixed\",   hlines = numeric(0),   use_colours = NULL,   use_shapes = NULL,   expand_x_axis = c(0.05, 0, 0.05, 0) )"},{"path":"https://simnph.github.io/SimNPH/reference/results_pivot_longer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions for Plotting and Reporting Results — results_pivot_longer","text":"data results_pivot_longer: simulation result retured SimDesign, combined_plot: simulation results long format, returned results_pivot_longer. exclude_from_methods \"methods\" pivoted long format methods methods include plot xvars orderd vector variable names display x axis yvar variable name variable displayed y axis (metric) facet_x_vars vector variable names create columns facets facet_y_vars vector variable names create rows facets split_var lines split, see details heights_plots relative heights main plot stairs bottom scale_stairs argument deprecated ignored grid_level depth loops grid-lines drawn scales passed facet_grid hlines position horizontal lines, passed yintercept geom_hline use_colours optional named vector colours used scale_colour_manual use_shapes optional named vector shapes used scale_shape_manual expand_x_axis axis expansion factor, passed scale_x_continuous","code":""},{"path":"https://simnph.github.io/SimNPH/reference/results_pivot_longer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions for Plotting and Reporting Results — results_pivot_longer","text":"dataset long format one row per method scenario one column per metric ggplot/patchwork object containing plots","code":""},{"path":"https://simnph.github.io/SimNPH/reference/results_pivot_longer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Functions for Plotting and Reporting Results — results_pivot_longer","text":"exclude_from_methods descriptive statistics results reference methods can kept columns used like columns simulation parameters. use_colours use_shapes use method variable respective aesthetics. split_var break lines 1st, 2nd, ... variable xvars. Use 0 one continuous line per method.","code":""},{"path":"https://simnph.github.io/SimNPH/reference/results_pivot_longer.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Functions for Plotting and Reporting Results — results_pivot_longer","text":"results_pivot_longer(): pivot simulation results long format combined_plot(): Nested Loop Plot optional Facets","code":""},{"path":"https://simnph.github.io/SimNPH/reference/results_pivot_longer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functions for Plotting and Reporting Results — results_pivot_longer","text":"","code":"# \\donttest{ data(\"combination_tests_delayed\")  combination_tests_delayed |>   results_pivot_longer() |>   head() #> # A tibble: 6 × 34 #>   delay hazard_ctrl    hr random_withdrawal n_pat_design followup recruitment #>   <dbl>       <dbl> <dbl>             <dbl>        <dbl>    <dbl>       <dbl> #> 1   0       0.00190   0.9          0.000190          300     730.           0 #> 2   0       0.00190   0.9          0.000190          300     730.           0 #> 3   0       0.00190   0.9          0.000190          300     730.           0 #> 4  60.9     0.00190   0.9          0.000190          300     730.           0 #> 5  60.9     0.00190   0.9          0.000190          300     730.           0 #> 6  60.9     0.00190   0.9          0.000190          300     730.           0 #> # ℹ 27 more variables: final_events <dbl>, hazard_trt <dbl>, n_ctrl <dbl>, #> #   n_trt <dbl>, median_survival_trt <dbl>, median_survival_ctrl <dbl>, #> #   rmst_trt_15 <dbl>, rmst_ctrl_15 <dbl>, gAHR_15 <dbl>, AHR_15 <dbl>, #> #   AHRoc_15 <dbl>, AHRoc_robust_15 <dbl>, REPLICATIONS <int>, SIM_TIME <dbl>, #> #   RAM_USED <chr>, SEED <int>, COMPLETED <chr>, method <chr>, #> #   rejection_0.025 <dbl>, N_missing_0.025 <dbl>, N <dbl>, mean_n_pat <dbl>, #> #   sd_n_pat <dbl>, mean_n_evt <dbl>, sd_n_evt <dbl>, N_missing_n_pat <dbl>, … # } # \\donttest{ library(\"ggplot2\") library(\"patchwork\") data(\"combination_tests_delayed\")  results_long <- results_pivot_longer(combination_tests_delayed)  # plot the rejection rate of two methods combined_plot(   results_long,   c(\"logrank\", \"mwlrt\", \"maxcombo\"),   c(\"hr\", \"n_pat_design\", \"delay\", \"hazard_ctrl\", \"recruitment\"),   \"rejection_0.025\",   grid_level=2 )   # use custom colour and shape scales # this can be used to group methods by shape or colour # this is also helpful if methods should have the same aesthetics across plots my_colours <- c(   logrank=\"black\",   mwlrt=\"blue\",   maxcombo=\"green\" )  my_shapes <- c(   logrank=1,   mwlrt=2,   maxcombo=2 )  combined_plot(   results_long,   c(\"logrank\", \"mwlrt\", \"maxcombo\"),   c(\"hr\", \"n_pat_design\", \"delay\", \"hazard_ctrl\", \"recruitment\"),   \"rejection_0.025\",   grid_level=2,   use_colours = my_colours,   use_shapes = my_shapes )   # if one has a dataset of metadata with categories of methods # one could uses those two definitions # colours for methods, same shapes for methods of same category metadata <- data.frame(   method = c(\"logrank\", \"mwlrt\", \"maxcombo\"),   method_name = c(\"logrank test\", \"modestly weighed logrank test\", \"maxcombo test\"),   category = c(\"logrank test\", \"combination test\", \"combination test\") )  my_colours <- ggplot2::scale_colour_discrete()$palette(n=nrow(metadata)) |>   sample() |>   setNames(metadata$method)  my_shapes <- metadata$category |>   as.factor() |>   as.integer() |>   setNames(metadata$method)  combined_plot(   results_long,   c(\"logrank\", \"mwlrt\", \"maxcombo\"),   c(\"hr\", \"n_pat_design\", \"delay\", \"hazard_ctrl\", \"recruitment\"),   \"rejection_0.025\",   grid_level=2,   use_colours = my_colours,   use_shapes = my_shapes )  # }"},{"path":"https://simnph.github.io/SimNPH/reference/shhr_gg.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot of survival, hazard and hazard ratio of two groups as a function of time using ggplot and patchwork — shhr_gg","title":"Plot of survival, hazard and hazard ratio of two groups as a function of time using ggplot and patchwork — shhr_gg","text":"Plot survival, hazard hazard ratio two groups function time using ggplot patchwork","code":""},{"path":"https://simnph.github.io/SimNPH/reference/shhr_gg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot of survival, hazard and hazard ratio of two groups as a function of time using ggplot and patchwork — shhr_gg","text":"","code":"shhr_gg(   A,   B,   main = NULL,   sub = NULL,   group_names = c(\"control\", \"treatment\"),   lab_time = \"Days\",   lab_group = \"Group\",   trafo_time = identity,   colours = palette()[c(1, 3)],   linetypes = c(1, 3),   linewidths = c(1.3, 1.3),   as_list = FALSE )"},{"path":"https://simnph.github.io/SimNPH/reference/shhr_gg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot of survival, hazard and hazard ratio of two groups as a function of time using ggplot and patchwork — shhr_gg","text":"mixpch object group 1 (reference) B mixpch object group 2 main Title overall plot sub Subtitle overall plot group_names Group Names lab_time Title time axis lab_group Title group legend trafo_time Function transform time colours vector two colours linetypes vector two linetypes linewidths vector two linewidths as_list return list ggplot objects instead patchwork object","code":""},{"path":"https://simnph.github.io/SimNPH/reference/shhr_gg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot of survival, hazard and hazard ratio of two groups as a function of time using ggplot and patchwork — shhr_gg","text":"patchwork object defined patchwork package list ggplot objects as_list=TRUE.","code":""},{"path":"https://simnph.github.io/SimNPH/reference/shhr_gg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot of survival, hazard and hazard ratio of two groups as a function of time using ggplot and patchwork — shhr_gg","text":"","code":"# \\donttest{ library(ggplot2) library(patchwork) library(nph) #>  #> Attaching package: ‘nph’ #> The following object is masked from ‘package:SimNPH’: #>  #>     m2r B <- pchaz(c(0, 10, 100), c(0.1, 0.05)) A <- pchaz(c(0, 100), c(0.1)) shhr_gg(A, B) #> Warning: No shared levels found between `names(values)` of the manual scale and the #> data's colour values. #> Warning: No shared levels found between `names(values)` of the manual scale and the #> data's linetype values.  shhr_gg(A, B, lab_time=\"Months\", trafo_time=d2m) #> Warning: No shared levels found between `names(values)` of the manual scale and the #> data's colour values. #> Warning: No shared levels found between `names(values)` of the manual scale and the #> data's linetype values.  # }"},{"path":"https://simnph.github.io/SimNPH/reference/summarise_estimator.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic Summarise function for esitmators — summarise_estimator","title":"Generic Summarise function for esitmators — summarise_estimator","text":"Generic Summarise function esitmators","code":""},{"path":"https://simnph.github.io/SimNPH/reference/summarise_estimator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic Summarise function for esitmators — summarise_estimator","text":"","code":"summarise_estimator(   est,   real,   lower = NULL,   upper = NULL,   null = NULL,   est_sd = NULL,   name = NULL )"},{"path":"https://simnph.github.io/SimNPH/reference/summarise_estimator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic Summarise function for esitmators — summarise_estimator","text":"est estimator, expression evaluated results real real summary statistic, expression evaluated condition lower lower CI, expression evaluated results upper upper CI, expression evaluated results null parameter value null hypothesis est_sd standard deviation estimated method, evaluated results name name summarise function, appended name analysis method final results","code":""},{"path":"https://simnph.github.io/SimNPH/reference/summarise_estimator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic Summarise function for esitmators — summarise_estimator","text":"function can used Summarise returns data frame summary statistics performance measures columns.","code":""},{"path":"https://simnph.github.io/SimNPH/reference/summarise_estimator.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic Summarise function for esitmators — summarise_estimator","text":"different parameters evaluated different envionments, est, lower, upper, est_sd refer output method evaluated results dataset. real refers real value summary statistic scenario therefore evaluated condition dataset. null name constants directly evaluated function defined. argument null, parameter value null hypothesis used output rejection rate based confidence intervall. output column null_cover","code":""},{"path":"https://simnph.github.io/SimNPH/reference/summarise_estimator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic Summarise function for esitmators — summarise_estimator","text":"","code":"# \\donttest{ # generate the design matrix and append the true summary statistics condition <- merge(   assumptions_delayed_effect(),   design_fixed_followup(),   by=NULL ) |>   tail(4) |>   head(1) |>   true_summary_statistics_delayed_effect(cutoff_stats = 15)  # create some summarise functions summarise_all <- create_summarise_function(   coxph=summarise_estimator(hr, gAHR_15, hr_lower, hr_upper, name=\"gAHR\"),   coxph=summarise_estimator(hr, hazard_trt/hazard_ctrl, hr_lower, hr_upper, name=\"HR\"),   coxph=summarise_estimator(hr, NA_real_, name=\"NA\") )  # runs simulations sim_results <- runSimulation(   design=condition,   replications=10,   generate=generate_delayed_effect,   analyse=list(     coxph=analyse_coxph()   ),   summarise = summarise_all ) #>  #>  Replications: 10;   RAM Used: 185.2 Mb;    #>  Conditions: delay=121., hzrd_c=0.0009, hzrd_t=0.0006, rndm_w=0.0001, n_trt=150, n_ctrl=150, follwp=730., rcrtmn=182., mdn_srvvl_t=1034, mdn_srvvl_c=730., rmst_t_15=14.8, rmst_c_15=14.8, gAHR_1=1, AHR_15=1, AHRc_15=1, AHR__1=1 #>   # mse is missing for the summarise function in which the real value was NA sim_results[, names(sim_results) |> grepl(pattern=\"\\\\.mse$\")] #> # A tibble: 1 × 3 #>   coxph.gAHR.mse coxph.HR.mse coxph.NA.mse #>            <dbl>        <dbl>        <dbl> #> 1        0.10149     0.025430          NaN # but the standard deviation can be estimated in all cases sim_results[, names(sim_results) |> grepl(pattern=\"\\\\.sd_est$\")] #> # A tibble: 1 × 3 #>   coxph.gAHR.sd_est coxph.HR.sd_est coxph.NA.sd_est #>               <dbl>           <dbl>           <dbl> #> 1           0.15869         0.15869         0.15869 # }"},{"path":"https://simnph.github.io/SimNPH/reference/summarise_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic summarise function for tests — summarise_test","title":"Generic summarise function for tests — summarise_test","text":"Generic summarise function tests","code":""},{"path":"https://simnph.github.io/SimNPH/reference/summarise_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic summarise function for tests — summarise_test","text":"","code":"summarise_test(alpha, name = NULL)"},{"path":"https://simnph.github.io/SimNPH/reference/summarise_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic summarise function for tests — summarise_test","text":"alpha significance level(s) name name summarise function, appended name analysis method final results","code":""},{"path":"https://simnph.github.io/SimNPH/reference/summarise_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic summarise function for tests — summarise_test","text":"function can used Summarise returns data frame columns rejection_X rejection_Y ... X, Y, ... alpha levels given argument","code":""},{"path":"https://simnph.github.io/SimNPH/reference/summarise_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic summarise function for tests — summarise_test","text":"","code":"# \\donttest{ condition <- merge(   assumptions_delayed_effect(),   design_fixed_followup(),   by=NULL ) |>   tail(4) |>   head(1)  summarise_all <- create_summarise_function(   logrank=summarise_test(alpha=c(0.5, 0.9, 0.95, 0.99)) )  # runs simulations sim_results <- runSimulation(   design=condition,   replications=100,   generate=generate_delayed_effect,   analyse=list(     logrank=analyse_logrank()   ),   summarise = summarise_all ) #>  #>  Replications: 100;   RAM Used: 185.3 Mb;    #>  Conditions: delay=121., hzrd_c=0.0009, hzrd_t=0.0006, rndm_w=0.0001, n_trt=150, n_ctrl=150, follwp=730., rcrtmn=182. #>   sim_results[, grepl(\"rejection\", names(sim_results))] #> # A tibble: 1 × 4 #>   logrank.rejection_0.5 logrank.rejection_0.9 logrank.rejection_0.95 #>                   <dbl>                 <dbl>                  <dbl> #> 1                     1                     1                      1 #> # ℹ 1 more variable: logrank.rejection_0.99 <dbl> # }"},{"path":"https://simnph.github.io/SimNPH/reference/wrap_all_in_trycatch.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrappers around Analyse Functions — wrap_all_in_trycatch","title":"Wrappers around Analyse Functions — wrap_all_in_trycatch","text":"Wrappers around Analyse Functions","code":""},{"path":"https://simnph.github.io/SimNPH/reference/wrap_all_in_trycatch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrappers around Analyse Functions — wrap_all_in_trycatch","text":"","code":"wrap_all_in_trycatch(   list_of_functions,   error = function(e) {      warning(e$message)      NA  } )  wrap_all_in_preserve_seed(list_of_functions)"},{"path":"https://simnph.github.io/SimNPH/reference/wrap_all_in_trycatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrappers around Analyse Functions — wrap_all_in_trycatch","text":"list_of_functions list functions wrapped error error function tryCatch call","code":""},{"path":"https://simnph.github.io/SimNPH/reference/wrap_all_in_trycatch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrappers around Analyse Functions — wrap_all_in_trycatch","text":"list functions","code":""},{"path":"https://simnph.github.io/SimNPH/reference/wrap_all_in_trycatch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Wrappers around Analyse Functions — wrap_all_in_trycatch","text":"SimDesign redraws data one analysis function fails. highly inefficient large studies, failure method informative might interest. Moreover redrawing data might introduce bias failure method independent parameter value, strong assumption. avoid redrawing data, can catch errors analysis methods throw return NA instead. handled well summarise functions generated create_summarise_function summarise functions might throw errors trying rbind data.frame scalar NA value. case add another error argument. example \\(e){NULL} work cases, cases give function returns data.frame columns analyse functions NA values. Analysis functions might use random numbers. simulations replicated can interfere RNG state analysis functions. avoid can wrap analysis function withr::with_preserve_seed call, RNG state reset analysis function called. way adding, removing changing one analysis function effect analysis functions, even analysis functions use random numbers.","code":""},{"path":"https://simnph.github.io/SimNPH/reference/wrap_all_in_trycatch.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Wrappers around Analyse Functions — wrap_all_in_trycatch","text":"wrap_all_in_trycatch(): Wrap functions list tryCatch calls wrap_all_in_preserve_seed(): wrap functions withr::with_preserve_seed","code":""},{"path":"https://simnph.github.io/SimNPH/reference/wrap_all_in_trycatch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrappers around Analyse Functions — wrap_all_in_trycatch","text":"","code":"funs1 <- list(\\(){stop(\"test\")}, \\(){1}) funs2 <- wrap_all_in_trycatch(funs1) try(lapply(funs1, \\(f){f()})) #> Error in f() : test try(lapply(funs2, \\(f){f()})) #> Warning: test #> [[1]] #> [1] NA #>  #> [[2]] #> [1] 1 #>   funs1 <- list(\\(){rnorm(1)}) funs2 <- list(\\(){runif(1)}, \\(){rnorm(1)}) funs3 <- funs2 |> wrap_all_in_preserve_seed() set.seed(1) lapply(funs1, \\(f){f()}) #> [[1]] #> [1] -0.6264538 #>  set.seed(1) lapply(funs2, \\(f){f()}) #> [[1]] #> [1] 0.2655087 #>  #> [[2]] #> [1] -0.3262334 #>  set.seed(1) lapply(funs3, \\(f){f()}) #> [[1]] #> [1] 0.2655087 #>  #> [[2]] #> [1] -0.6264538 #>"},{"path":"https://simnph.github.io/SimNPH/news/index.html","id":"simnph-056","dir":"Changelog","previous_headings":"","what":"SimNPH 0.5.6","title":"SimNPH 0.5.6","text":"Fixed minor mistakes documentation. Added parameter control x-axis expansion combined_plot. Updated tests compatible upcoming release ggplot2 3.6.0","code":""},{"path":"https://simnph.github.io/SimNPH/news/index.html","id":"simnph-055","dir":"Changelog","previous_headings":"","what":"SimNPH 0.5.5","title":"SimNPH 0.5.5","text":"CRAN release: 2024-03-04 Sped calculation treatment arm hazard effect size calculation censoring rate censoring proportion progression scenarios. Minor improvements plot functions documentation.","code":""},{"path":"https://simnph.github.io/SimNPH/news/index.html","id":"simnph-054","dir":"Changelog","previous_headings":"","what":"SimNPH 0.5.4","title":"SimNPH 0.5.4","text":"CRAN release: 2024-01-08 Reworked combined_plot function. Fixed bug split_var argument working. Deprecated defunct argument scale_stairs, providing argument now gives warning. Improved speed removed dependencies.","code":""},{"path":"https://simnph.github.io/SimNPH/news/index.html","id":"simnph-053","dir":"Changelog","previous_headings":"","what":"SimNPH 0.5.3","title":"SimNPH 0.5.3","text":"CRAN release: 2023-11-09 Changed calculation real summary measures progression scenario: corrected one mistake calculation gAHR functions now use new, faster implementation miniPCH package.","code":""},{"path":"https://simnph.github.io/SimNPH/news/index.html","id":"simnph-052","dir":"Changelog","previous_headings":"","what":"SimNPH 0.5.2","title":"SimNPH 0.5.2","text":"Added option suppress output design assumption templates. Changed \\dontrun \\donttest examples. Improved examples documentation. Cleaned package metadata.","code":""},{"path":"https://simnph.github.io/SimNPH/news/index.html","id":"simnph-051","dir":"Changelog","previous_headings":"","what":"SimNPH 0.5.1","title":"SimNPH 0.5.1","text":"Added references preprint paper description citation. Added references preprint shiny app readme. First CRAN submission.","code":""},{"path":"https://simnph.github.io/SimNPH/news/index.html","id":"simnph-050","dir":"Changelog","previous_headings":"","what":"SimNPH 0.5.0","title":"SimNPH 0.5.0","text":"Moved compiled functions new package “miniPCH” clarify structure compliant Rcpp licence.","code":""},{"path":"https://simnph.github.io/SimNPH/news/index.html","id":"simnph-043","dir":"Changelog","previous_headings":"","what":"SimNPH 0.4.3","title":"SimNPH 0.4.3","text":"Added workaround bug nph package, package longer requires custom patched version nph work.","code":""},{"path":"https://simnph.github.io/SimNPH/news/index.html","id":"simnph-042","dir":"Changelog","previous_headings":"","what":"SimNPH 0.4.2","title":"SimNPH 0.4.2","text":"Built first version pkdown Site.","code":""}]
