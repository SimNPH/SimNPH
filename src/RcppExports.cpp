// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/SimNPH.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// hazFunCpp
NumericVector hazFunCpp(const NumericVector& Tint, const NumericVector& lambda, const NumericVector& v);
static SEXP _SimNPH_hazFunCpp_try(SEXP TintSEXP, SEXP lambdaSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type Tint(TintSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(hazFunCpp(Tint, lambda, v));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _SimNPH_hazFunCpp(SEXP TintSEXP, SEXP lambdaSEXP, SEXP vSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_SimNPH_hazFunCpp_try(TintSEXP, lambdaSEXP, vSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cumhazFunCpp
NumericVector cumhazFunCpp(const NumericVector& Tint, const NumericVector& lambda, const NumericVector& v);
static SEXP _SimNPH_cumhazFunCpp_try(SEXP TintSEXP, SEXP lambdaSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type Tint(TintSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(cumhazFunCpp(Tint, lambda, v));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _SimNPH_cumhazFunCpp(SEXP TintSEXP, SEXP lambdaSEXP, SEXP vSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_SimNPH_cumhazFunCpp_try(TintSEXP, lambdaSEXP, vSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cdfFunCpp
NumericVector cdfFunCpp(const NumericVector& Tint, const NumericVector& lambda, const NumericVector& v);
static SEXP _SimNPH_cdfFunCpp_try(SEXP TintSEXP, SEXP lambdaSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type Tint(TintSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(cdfFunCpp(Tint, lambda, v));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _SimNPH_cdfFunCpp(SEXP TintSEXP, SEXP lambdaSEXP, SEXP vSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_SimNPH_cdfFunCpp_try(TintSEXP, lambdaSEXP, vSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// pdfFunCpp
NumericVector pdfFunCpp(const NumericVector& Tint, const NumericVector& lambda, const NumericVector& v);
static SEXP _SimNPH_pdfFunCpp_try(SEXP TintSEXP, SEXP lambdaSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type Tint(TintSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(pdfFunCpp(Tint, lambda, v));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _SimNPH_pdfFunCpp(SEXP TintSEXP, SEXP lambdaSEXP, SEXP vSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_SimNPH_pdfFunCpp_try(TintSEXP, lambdaSEXP, vSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// survFunCpp
NumericVector survFunCpp(const NumericVector& Tint, const NumericVector& lambda, const NumericVector& v);
static SEXP _SimNPH_survFunCpp_try(SEXP TintSEXP, SEXP lambdaSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type Tint(TintSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(survFunCpp(Tint, lambda, v));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _SimNPH_survFunCpp(SEXP TintSEXP, SEXP lambdaSEXP, SEXP vSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_SimNPH_survFunCpp_try(TintSEXP, lambdaSEXP, vSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _SimNPH_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("NumericVector(*hazFunCpp)(const NumericVector&,const NumericVector&,const NumericVector&)");
        signatures.insert("NumericVector(*cumhazFunCpp)(const NumericVector&,const NumericVector&,const NumericVector&)");
        signatures.insert("NumericVector(*cdfFunCpp)(const NumericVector&,const NumericVector&,const NumericVector&)");
        signatures.insert("NumericVector(*pdfFunCpp)(const NumericVector&,const NumericVector&,const NumericVector&)");
        signatures.insert("NumericVector(*survFunCpp)(const NumericVector&,const NumericVector&,const NumericVector&)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _SimNPH_RcppExport_registerCCallable() { 
    R_RegisterCCallable("SimNPH", "_SimNPH_hazFunCpp", (DL_FUNC)_SimNPH_hazFunCpp_try);
    R_RegisterCCallable("SimNPH", "_SimNPH_cumhazFunCpp", (DL_FUNC)_SimNPH_cumhazFunCpp_try);
    R_RegisterCCallable("SimNPH", "_SimNPH_cdfFunCpp", (DL_FUNC)_SimNPH_cdfFunCpp_try);
    R_RegisterCCallable("SimNPH", "_SimNPH_pdfFunCpp", (DL_FUNC)_SimNPH_pdfFunCpp_try);
    R_RegisterCCallable("SimNPH", "_SimNPH_survFunCpp", (DL_FUNC)_SimNPH_survFunCpp_try);
    R_RegisterCCallable("SimNPH", "_SimNPH_RcppExport_validate", (DL_FUNC)_SimNPH_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_SimNPH_hazFunCpp", (DL_FUNC) &_SimNPH_hazFunCpp, 3},
    {"_SimNPH_cumhazFunCpp", (DL_FUNC) &_SimNPH_cumhazFunCpp, 3},
    {"_SimNPH_cdfFunCpp", (DL_FUNC) &_SimNPH_cdfFunCpp, 3},
    {"_SimNPH_pdfFunCpp", (DL_FUNC) &_SimNPH_pdfFunCpp, 3},
    {"_SimNPH_survFunCpp", (DL_FUNC) &_SimNPH_survFunCpp, 3},
    {"_SimNPH_RcppExport_registerCCallable", (DL_FUNC) &_SimNPH_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_SimNPH(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
